"use strict";
import helpAction from "./action/help";
import serverAction from "./action/server";
import versionAction from "./action/version";
import publishAction from "./action/publish";
import initialiseAction from "./action/initialise";
import setOptionsAction from "./action/setOptions";
import { NO_ARGUMENT_GIVEN_MESSAGE, COMMAND_NOT_RECOGNISED_MESSAGE } from "./messages";
import { HELP_COMMAND, SERVER_COMMAND, VERSION_COMMAND, PUBLISH_COMMAND, INITIALISE_COMMAND, SET_OPTIONS_COMMAND } from "./commands";
import { DEFAULT_PORT, DEFAULT_FONTS, DEFAULT_WATCH, DEFAULT_CLIENT, DEFAULT_QUIETLY, DEFAULT_INPUT_FILE_NAME } from "./defaults";
export default function main(command, argument, options) {
    var _options_port = options.port, port = _options_port === void 0 ? DEFAULT_PORT : _options_port, _options_fonts = options.fonts, fonts = _options_fonts === void 0 ? DEFAULT_FONTS : _options_fonts, _options_watch = options.watch, watch = _options_watch === void 0 ? DEFAULT_WATCH : _options_watch, _options_client = options.client, client = _options_client === void 0 ? DEFAULT_CLIENT : _options_client, _options_quietly = options.quietly, quietly = _options_quietly === void 0 ? DEFAULT_QUIETLY : _options_quietly, _options_inputFileName = options.inputFileName, inputFileName = _options_inputFileName === void 0 ? DEFAULT_INPUT_FILE_NAME : _options_inputFileName;
    switch(command){
        case HELP_COMMAND:
            {
                helpAction();
                break;
            }
        case VERSION_COMMAND:
            {
                versionAction();
                break;
            }
        case INITIALISE_COMMAND:
            {
                initialiseAction();
                break;
            }
        case SERVER_COMMAND:
            {
                if (argument === null) {
                    console.log(NO_ARGUMENT_GIVEN_MESSAGE);
                } else {
                    var projectDirectoryName = argument; ///
                    serverAction(port, watch, quietly, projectDirectoryName);
                }
                break;
            }
        case PUBLISH_COMMAND:
            {
                if (argument === null) {
                    console.log(NO_ARGUMENT_GIVEN_MESSAGE);
                } else {
                    var projectDirectoryName1 = argument; ///
                    publishAction(port, fonts, watch, client, quietly, inputFileName, projectDirectoryName1);
                }
                break;
            }
        case SET_OPTIONS_COMMAND:
            {
                setOptionsAction();
                break;
            }
        default:
            {
                console.log(COMMAND_NOT_RECOGNISED_MESSAGE);
                break;
            }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgaGVscEFjdGlvbiBmcm9tIFwiLi9hY3Rpb24vaGVscFwiO1xuaW1wb3J0IHNlcnZlckFjdGlvbiBmcm9tIFwiLi9hY3Rpb24vc2VydmVyXCI7XG5pbXBvcnQgdmVyc2lvbkFjdGlvbiBmcm9tIFwiLi9hY3Rpb24vdmVyc2lvblwiO1xuaW1wb3J0IHB1Ymxpc2hBY3Rpb24gZnJvbSBcIi4vYWN0aW9uL3B1Ymxpc2hcIjtcbmltcG9ydCBpbml0aWFsaXNlQWN0aW9uIGZyb20gXCIuL2FjdGlvbi9pbml0aWFsaXNlXCI7XG5pbXBvcnQgc2V0T3B0aW9uc0FjdGlvbiBmcm9tIFwiLi9hY3Rpb24vc2V0T3B0aW9uc1wiO1xuXG5pbXBvcnQgeyBOT19BUkdVTUVOVF9HSVZFTl9NRVNTQUdFLCBDT01NQU5EX05PVF9SRUNPR05JU0VEX01FU1NBR0UgfSBmcm9tIFwiLi9tZXNzYWdlc1wiO1xuaW1wb3J0IHsgSEVMUF9DT01NQU5ELCBTRVJWRVJfQ09NTUFORCwgVkVSU0lPTl9DT01NQU5ELCBQVUJMSVNIX0NPTU1BTkQsIElOSVRJQUxJU0VfQ09NTUFORCwgU0VUX09QVElPTlNfQ09NTUFORCB9IGZyb20gXCIuL2NvbW1hbmRzXCI7XG5pbXBvcnQgeyBERUZBVUxUX1BPUlQsXG4gICAgICAgICBERUZBVUxUX0ZPTlRTLFxuICAgICAgICAgREVGQVVMVF9XQVRDSCxcbiAgICAgICAgIERFRkFVTFRfQ0xJRU5ULFxuICAgICAgICAgREVGQVVMVF9RVUlFVExZLFxuICAgICAgICAgREVGQVVMVF9JTlBVVF9GSUxFX05BTUUgfSBmcm9tIFwiLi9kZWZhdWx0c1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWluKGNvbW1hbmQsIGFyZ3VtZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgcG9ydCA9IERFRkFVTFRfUE9SVCxcbiAgICAgICAgICBmb250cyA9IERFRkFVTFRfRk9OVFMsXG4gICAgICAgICAgd2F0Y2ggPSBERUZBVUxUX1dBVENILFxuICAgICAgICAgIGNsaWVudCA9IERFRkFVTFRfQ0xJRU5ULFxuICAgICAgICAgIHF1aWV0bHkgPSBERUZBVUxUX1FVSUVUTFksXG4gICAgICAgICAgaW5wdXRGaWxlTmFtZSA9IERFRkFVTFRfSU5QVVRfRklMRV9OQU1FIH0gPSBvcHRpb25zO1xuXG4gIHN3aXRjaCAoY29tbWFuZCkge1xuICAgIGNhc2UgSEVMUF9DT01NQU5EOiAge1xuICAgICAgaGVscEFjdGlvbigpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIFZFUlNJT05fQ09NTUFORDoge1xuICAgICAgdmVyc2lvbkFjdGlvbigpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIElOSVRJQUxJU0VfQ09NTUFORDoge1xuICAgICAgaW5pdGlhbGlzZUFjdGlvbigpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIFNFUlZFUl9DT01NQU5EOiB7XG4gICAgICBpZiAoYXJndW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5sb2coTk9fQVJHVU1FTlRfR0lWRU5fTUVTU0FHRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwcm9qZWN0RGlyZWN0b3J5TmFtZSA9IGFyZ3VtZW50OyAgLy8vXG5cbiAgICAgICAgc2VydmVyQWN0aW9uKHBvcnQsIHdhdGNoLCBxdWlldGx5LCBwcm9qZWN0RGlyZWN0b3J5TmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNhc2UgUFVCTElTSF9DT01NQU5EOiB7XG4gICAgICBpZiAoYXJndW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5sb2coTk9fQVJHVU1FTlRfR0lWRU5fTUVTU0FHRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwcm9qZWN0RGlyZWN0b3J5TmFtZSA9IGFyZ3VtZW50OyAgLy8vXG5cbiAgICAgICAgcHVibGlzaEFjdGlvbihwb3J0LCBmb250cywgd2F0Y2gsIGNsaWVudCwgcXVpZXRseSwgaW5wdXRGaWxlTmFtZSwgcHJvamVjdERpcmVjdG9yeU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIFNFVF9PUFRJT05TX0NPTU1BTkQ6IHtcbiAgICAgIHNldE9wdGlvbnNBY3Rpb24oKTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc29sZS5sb2coQ09NTUFORF9OT1RfUkVDT0dOSVNFRF9NRVNTQUdFKTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiaGVscEFjdGlvbiIsInNlcnZlckFjdGlvbiIsInZlcnNpb25BY3Rpb24iLCJwdWJsaXNoQWN0aW9uIiwiaW5pdGlhbGlzZUFjdGlvbiIsInNldE9wdGlvbnNBY3Rpb24iLCJOT19BUkdVTUVOVF9HSVZFTl9NRVNTQUdFIiwiQ09NTUFORF9OT1RfUkVDT0dOSVNFRF9NRVNTQUdFIiwiSEVMUF9DT01NQU5EIiwiU0VSVkVSX0NPTU1BTkQiLCJWRVJTSU9OX0NPTU1BTkQiLCJQVUJMSVNIX0NPTU1BTkQiLCJJTklUSUFMSVNFX0NPTU1BTkQiLCJTRVRfT1BUSU9OU19DT01NQU5EIiwiREVGQVVMVF9QT1JUIiwiREVGQVVMVF9GT05UUyIsIkRFRkFVTFRfV0FUQ0giLCJERUZBVUxUX0NMSUVOVCIsIkRFRkFVTFRfUVVJRVRMWSIsIkRFRkFVTFRfSU5QVVRfRklMRV9OQU1FIiwibWFpbiIsImNvbW1hbmQiLCJhcmd1bWVudCIsIm9wdGlvbnMiLCJwb3J0IiwiZm9udHMiLCJ3YXRjaCIsImNsaWVudCIsInF1aWV0bHkiLCJpbnB1dEZpbGVOYW1lIiwiY29uc29sZSIsImxvZyIsInByb2plY3REaXJlY3RvcnlOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE9BQU9BLGdCQUFnQixnQkFBZ0I7QUFDdkMsT0FBT0Msa0JBQWtCLGtCQUFrQjtBQUMzQyxPQUFPQyxtQkFBbUIsbUJBQW1CO0FBQzdDLE9BQU9DLG1CQUFtQixtQkFBbUI7QUFDN0MsT0FBT0Msc0JBQXNCLHNCQUFzQjtBQUNuRCxPQUFPQyxzQkFBc0Isc0JBQXNCO0FBRW5ELFNBQVNDLHlCQUF5QixFQUFFQyw4QkFBOEIsUUFBUSxhQUFhO0FBQ3ZGLFNBQVNDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUVDLGVBQWUsRUFBRUMsa0JBQWtCLEVBQUVDLG1CQUFtQixRQUFRLGFBQWE7QUFDckksU0FBU0MsWUFBWSxFQUNaQyxhQUFhLEVBQ2JDLGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxlQUFlLEVBQ2ZDLHVCQUF1QixRQUFRLGFBQWE7QUFFckQsZUFBZSxTQUFTQyxLQUFLQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsT0FBTztJQUNyRCxvQkFLb0RBLFFBTDVDQyxNQUFBQSxrQ0FBT1YsK0NBS3FDUyxRQUo1Q0UsT0FBQUEsb0NBQVFWLGlEQUlvQ1EsUUFINUNHLE9BQUFBLG9DQUFRVixrREFHb0NPLFFBRjVDSSxRQUFBQSxzQ0FBU1YscURBRW1DTSxRQUQ1Q0ssU0FBQUEsd0NBQVVWLDZEQUNrQ0ssUUFBNUNNLGVBQUFBLG9EQUFnQlY7SUFFeEIsT0FBUUU7UUFDTixLQUFLYjtZQUFlO2dCQUNsQlI7Z0JBRUE7WUFDRjtRQUVBLEtBQUtVO1lBQWlCO2dCQUNwQlI7Z0JBRUE7WUFDRjtRQUVBLEtBQUtVO1lBQW9CO2dCQUN2QlI7Z0JBRUE7WUFDRjtRQUVBLEtBQUtLO1lBQWdCO2dCQUNuQixJQUFJYSxhQUFhLE1BQU07b0JBQ3JCUSxRQUFRQyxHQUFHLENBQUN6QjtnQkFDZCxPQUFPO29CQUNMLElBQU0wQix1QkFBdUJWLFVBQVcsR0FBRztvQkFFM0NyQixhQUFhdUIsTUFBTUUsT0FBT0UsU0FBU0k7Z0JBQ3JDO2dCQUVBO1lBQ0Y7UUFFQSxLQUFLckI7WUFBaUI7Z0JBQ3BCLElBQUlXLGFBQWEsTUFBTTtvQkFDckJRLFFBQVFDLEdBQUcsQ0FBQ3pCO2dCQUNkLE9BQU87b0JBQ0wsSUFBTTBCLHdCQUF1QlYsVUFBVyxHQUFHO29CQUUzQ25CLGNBQWNxQixNQUFNQyxPQUFPQyxPQUFPQyxRQUFRQyxTQUFTQyxlQUFlRztnQkFDcEU7Z0JBRUE7WUFDRjtRQUVBLEtBQUtuQjtZQUFxQjtnQkFDeEJSO2dCQUVBO1lBQ0Y7UUFFQTtZQUFTO2dCQUNQeUIsUUFBUUMsR0FBRyxDQUFDeEI7Z0JBRVo7WUFDRjtJQUNGO0FBQ0YifQ==