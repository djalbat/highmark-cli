"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _fullScreen = require("../utilities/fullScreen");
var _eventTypes = require("../eventTypes");
var _customEventTypes = require("../customEventTypes");
function enableFullScreen() {
    this.onFullscreenchange(this.fullscreenchangeHandler);
}
function disableFullScreen() {
    this.offFullscreenchange(this.fullscreenchangeHandler);
}
function exitFullScreen() {
    document.exitFullscreen();
}
function requestFullScreen() {
    var domElement = this.getDOMElement();
    domElement.requestFullscreen().catch(alert);
}
function onFullscreenchange(fullscreenchangeHandler) {
    var eventType = _eventTypes.FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.onEvent(eventType, handler);
}
function offFullscreenchange(fullscreenchangeHandler) {
    var eventType = _eventTypes.FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.offEvent(eventType, handler);
}
function fullscreenchangeHandler(event, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE;
    this.callCustomHandlers(customEventType, event, element);
}
function onCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
var fullScreenMixins = {
    enableFullScreen: enableFullScreen,
    disableFullScreen: disableFullScreen,
    isFullScreen: _fullScreen.isFullScreen,
    exitFullScreen: exitFullScreen,
    requestFullScreen: requestFullScreen,
    onFullscreenchange: onFullscreenchange,
    offFullscreenchange: offFullscreenchange,
    fullscreenchangeHandler: fullscreenchangeHandler,
    onCustomFullScreenChange: onCustomFullScreenChange,
    offCustomFullScreenChange: offCustomFullScreenChange
};
var _default = fullScreenMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZnVsbHNyZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc0Z1bGxTY3JlZW4gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2Z1bGxTY3JlZW5cIjtcbmltcG9ydCB7IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSB9IGZyb20gXCIuLi9ldmVudFR5cGVzXCI7XG5pbXBvcnQgeyBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vY3VzdG9tRXZlbnRUeXBlc1wiO1xuXG5mdW5jdGlvbiBlbmFibGVGdWxsU2NyZWVuKCkge1xuICB0aGlzLm9uRnVsbHNjcmVlbmNoYW5nZSh0aGlzLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZUZ1bGxTY3JlZW4oKSB7XG4gIHRoaXMub2ZmRnVsbHNjcmVlbmNoYW5nZSh0aGlzLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZXhpdEZ1bGxTY3JlZW4oKSB7XG4gIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RGdWxsU2NyZWVuKCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gdGhpcy5nZXRET01FbGVtZW50KCk7XG5cbiAgZG9tRWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpXG4gICAgLmNhdGNoKGFsZXJ0KTtcbn1cblxuZnVuY3Rpb24gb25GdWxsc2NyZWVuY2hhbmdlKGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5vbkV2ZW50KGV2ZW50VHlwZSwgaGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIG9mZkZ1bGxzY3JlZW5jaGFuZ2UoZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gRlVMTFNDUkVFTkNIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLm9mZkV2ZW50KGV2ZW50VHlwZSwgaGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKGV2ZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IGN1c3RvbUV2ZW50VHlwZSA9IEZVTExfU0NSRUVOX0NIQU5HRV9DVVNUT01fRVZFTlRfVFlQRTtcblxuICB0aGlzLmNhbGxDdXN0b21IYW5kbGVycyhjdXN0b21FdmVudFR5cGUsIGV2ZW50LCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25DdXN0b21GdWxsU2NyZWVuQ2hhbmdlKGZ1bGxTY3JlZW5DaGFuZ2VDdXN0b21IYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGN1c3RvbUV2ZW50VHlwZSA9IEZVTExfU0NSRUVOX0NIQU5HRV9DVVNUT01fRVZFTlRfVFlQRSxcbiAgICAgICAgY3VzdG9tSGFuZGxlciA9IGZ1bGxTY3JlZW5DaGFuZ2VDdXN0b21IYW5kbGVyOyAvLy9cblxuICB0aGlzLm9uQ3VzdG9tRXZlbnQoY3VzdG9tRXZlbnRUeXBlLCBjdXN0b21IYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZShmdWxsU2NyZWVuQ2hhbmdlQ3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUsXG4gICAgICAgIGN1c3RvbUhhbmRsZXIgPSBmdWxsU2NyZWVuQ2hhbmdlQ3VzdG9tSGFuZGxlcjsgLy8vXG5cbiAgdGhpcy5vZmZDdXN0b21FdmVudChjdXN0b21FdmVudFR5cGUsIGN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5jb25zdCBmdWxsU2NyZWVuTWl4aW5zID0ge1xuICBlbmFibGVGdWxsU2NyZWVuLFxuICBkaXNhYmxlRnVsbFNjcmVlbixcbiAgaXNGdWxsU2NyZWVuLFxuICBleGl0RnVsbFNjcmVlbixcbiAgcmVxdWVzdEZ1bGxTY3JlZW4sXG4gIG9uRnVsbHNjcmVlbmNoYW5nZSxcbiAgb2ZmRnVsbHNjcmVlbmNoYW5nZSxcbiAgZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIsXG4gIG9uQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZSxcbiAgb2ZmQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVsbFNjcmVlbk1peGlucztcbiJdLCJuYW1lcyI6WyJlbmFibGVGdWxsU2NyZWVuIiwib25GdWxsc2NyZWVuY2hhbmdlIiwiZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIiLCJkaXNhYmxlRnVsbFNjcmVlbiIsIm9mZkZ1bGxzY3JlZW5jaGFuZ2UiLCJleGl0RnVsbFNjcmVlbiIsImRvY3VtZW50IiwiZXhpdEZ1bGxzY3JlZW4iLCJyZXF1ZXN0RnVsbFNjcmVlbiIsImRvbUVsZW1lbnQiLCJnZXRET01FbGVtZW50IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJjYXRjaCIsImFsZXJ0IiwiZXZlbnRUeXBlIiwiRlVMTFNDUkVFTkNIQU5HRV9FVkVOVF9UWVBFIiwiaGFuZGxlciIsIm9uRXZlbnQiLCJvZmZFdmVudCIsImV2ZW50IiwiZWxlbWVudCIsImN1c3RvbUV2ZW50VHlwZSIsIkZVTExfU0NSRUVOX0NIQU5HRV9DVVNUT01fRVZFTlRfVFlQRSIsImNhbGxDdXN0b21IYW5kbGVycyIsIm9uQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZSIsImZ1bGxTY3JlZW5DaGFuZ2VDdXN0b21IYW5kbGVyIiwiY3VzdG9tSGFuZGxlciIsIm9uQ3VzdG9tRXZlbnQiLCJvZmZDdXN0b21GdWxsU2NyZWVuQ2hhbmdlIiwib2ZmQ3VzdG9tRXZlbnQiLCJmdWxsU2NyZWVuTWl4aW5zIiwiaXNGdWxsU2NyZWVuIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OytCQXdFQTs7O2VBQUE7OzswQkF0RTZCOzBCQUNlO2dDQUNTO0FBRXJELFNBQVNBO0lBQ1AsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUNDLHVCQUF1QjtBQUN0RDtBQUVBLFNBQVNDO0lBQ1AsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUNGLHVCQUF1QjtBQUN2RDtBQUVBLFNBQVNHO0lBQ1BDLFNBQVNDLGNBQWM7QUFDekI7QUFFQSxTQUFTQztJQUNQLElBQU1DLGFBQWEsSUFBSSxDQUFDQyxhQUFhO0lBRXJDRCxXQUFXRSxpQkFBaUIsR0FDekJDLEtBQUssQ0FBQ0M7QUFDWDtBQUVBLFNBQVNaLG1CQUFtQkMsdUJBQXVCO0lBQ2pELElBQU1ZLFlBQVlDLHVDQUEyQixFQUN2Q0MsVUFBVWQseUJBQTBCLEdBQUc7SUFFN0MsSUFBSSxDQUFDZSxPQUFPLENBQUNILFdBQVdFO0FBQzFCO0FBRUEsU0FBU1osb0JBQW9CRix1QkFBdUI7SUFDbEQsSUFBTVksWUFBWUMsdUNBQTJCLEVBQ3ZDQyxVQUFVZCx5QkFBMEIsR0FBRztJQUU3QyxJQUFJLENBQUNnQixRQUFRLENBQUNKLFdBQVdFO0FBQzNCO0FBRUEsU0FBU2Qsd0JBQXdCaUIsS0FBSyxFQUFFQyxPQUFPO0lBQzdDLElBQU1DLGtCQUFrQkMsc0RBQW9DO0lBRTVELElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGLGlCQUFpQkYsT0FBT0M7QUFDbEQ7QUFFQSxTQUFTSSx5QkFBeUJDLDZCQUE2QixFQUFFTCxPQUFPO0lBQ3RFLElBQU1DLGtCQUFrQkMsc0RBQW9DLEVBQ3RESSxnQkFBZ0JELCtCQUErQixHQUFHO0lBRXhELElBQUksQ0FBQ0UsYUFBYSxDQUFDTixpQkFBaUJLLGVBQWVOO0FBQ3JEO0FBRUEsU0FBU1EsMEJBQTBCSCw2QkFBNkIsRUFBRUwsT0FBTztJQUN2RSxJQUFNQyxrQkFBa0JDLHNEQUFvQyxFQUN0REksZ0JBQWdCRCwrQkFBK0IsR0FBRztJQUV4RCxJQUFJLENBQUNJLGNBQWMsQ0FBQ1IsaUJBQWlCSyxlQUFlTjtBQUN0RDtBQUVBLElBQU1VLG1CQUFtQjtJQUN2QjlCLGtCQUFBQTtJQUNBRyxtQkFBQUE7SUFDQTRCLGNBQUFBLHdCQUFZO0lBQ1oxQixnQkFBQUE7SUFDQUcsbUJBQUFBO0lBQ0FQLG9CQUFBQTtJQUNBRyxxQkFBQUE7SUFDQUYseUJBQUFBO0lBQ0FzQiwwQkFBQUE7SUFDQUksMkJBQUFBO0FBQ0Y7SUFFQSxXQUFlRSJ9