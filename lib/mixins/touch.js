"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _easy = require("easy");
var _position = /*#__PURE__*/ _interop_require_default(require("../position"));
var _velocity = /*#__PURE__*/ _interop_require_default(require("../velocity"));
var _customEventTypes = require("../customEventTypes");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function touchStartHandler(event, element) {
    this.startHandler(event, element, function(event) {
        var touchEvent = event, position = _position.default.fromTouchEvent(touchEvent);
        return position;
    });
}
function mouseDownHandler(event, element) {
    this.startHandler(event, element, function(event) {
        var mouseEvent = event, position = _position.default.fromMouseEvent(mouseEvent);
        return position;
    });
}
function touchMoveHandler(event, element) {
    this.moveHandler(event, element, function(event) {
        var touchEvent = event, position = _position.default.fromTouchEvent(touchEvent);
        return position;
    });
}
function mouseMoveHandler(event, element) {
    this.moveHandler(event, element, function(event) {
        var mouseEvent = event, position = _position.default.fromMouseEvent(mouseEvent);
        return position;
    });
}
function touchEndHandler(event, element) {
    this.endHandler(event, element, function(event) {
        var touchEvent = event, position = _position.default.fromTouchEvent(touchEvent);
        return position;
    });
}
function mouseUpHandler(event, element) {
    this.endHandler(event, element, function(event) {
        var mouseEvent = event, position = _position.default.fromMouseEvent(mouseEvent);
        return position;
    });
}
function startHandler(event, element, positionFromEvent) {
    var position = positionFromEvent(event), startPosition = position; ///
    this.setStartPosition(startPosition);
}
function moveHandler(event, element, positionFromEvent) {
    var startPosition = this.getStartPosition();
    if (startPosition !== null) {
        var position = positionFromEvent(event);
        if (position !== null) {
            var positionMatchesStartPosition = position.match(startPosition);
            if (positionMatchesStartPosition) {
                var velocity = _velocity.default.fromPositionAndStartPosition(position, startPosition), speed = velocity.getSpeed();
                var swipeDirection = 0;
                if (speed > _constants.MINIMUM_SWIPE_SPEED) {
                    var absoluteDirection = velocity.getAbsoluteDirection();
                    if (absoluteDirection < _constants.MAXIMUM_SWIPE_ABSOLUTE_DIRECTION) {
                        swipeDirection = +1;
                    }
                    if (_constants.ONE_HUNDRED_AND_EIGHTY - absoluteDirection < _constants.MAXIMUM_SWIPE_ABSOLUTE_DIRECTION) {
                        swipeDirection = -1;
                    }
                }
                if (swipeDirection !== 0) {
                    var customEventType = _customEventTypes.SWIPE_CUSTOM_EVENT_TYPE;
                    this.callCustomHandlers(customEventType, event, element, swipeDirection);
                }
            }
        }
    }
}
function endHandler(event, element, positionFromEvent) {
    var startPosition;
    startPosition = this.getStartPosition();
    if (startPosition !== null) {
        var position = positionFromEvent(event);
        if (position !== null) {
            var positionMatchesStartPosition = position.match(startPosition);
            if (positionMatchesStartPosition) {
                var velocity = _velocity.default.fromPositionAndStartPosition(position, startPosition), speed = velocity.getSpeed();
                if (speed === 0) {
                    var time = velocity.getTime();
                    if (time < _constants.MAXIMUM_TAP_TIME) {
                        var customEventType = _customEventTypes.TAP_CUSTOM_EVENT_TYPE;
                        this.callCustomHandlers(customEventType, event, element);
                    }
                }
            }
        }
    }
}
function enableTouch() {
    var startPosition = null;
    this.updateState({
        startPosition: startPosition
    });
    this.onMouseDown(this.mouseDownHandler);
    this.onMouseMove(this.mouseMoveHandler);
    _easy.window.onMouseUp(this.mouseUpHandler, this);
    this.onTouchStart(this.touchStartHandler);
    this.onTouchMove(this.touchMoveHandler);
    this.onTouchEnd(this.touchEndHandler);
}
function disableTouch() {
    this.offMouseDown(this.mouseDownHandler);
    this.offMouseMove(this.mouseMoveHandler);
    _easy.window.offMouseUp(this.mouseUpHandler, this);
    this.offTouchStart(this.touchStartHandler);
    this.offTouchMove(this.touchMoveHandler);
    this.offTouchEnd(this.touchEndHandler);
}
function onCustomTap(tapCustomHandler, element) {
    var customEventType = _customEventTypes.TAP_CUSTOM_EVENT_TYPE, customHandler = tapCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomTap(tapCustomHandler, element) {
    var customEventType = _customEventTypes.TAP_CUSTOM_EVENT_TYPE, customHandler = tapCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomSwipe(swipeCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_CUSTOM_EVENT_TYPE, customHandler = swipeCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomSwipe(swipeCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_CUSTOM_EVENT_TYPE, customHandler = swipeCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
var customEventMixins = {
    touchStartHandler: touchStartHandler,
    mouseDownHandler: mouseDownHandler,
    touchMoveHandler: touchMoveHandler,
    mouseMoveHandler: mouseMoveHandler,
    touchEndHandler: touchEndHandler,
    mouseUpHandler: mouseUpHandler,
    startHandler: startHandler,
    moveHandler: moveHandler,
    endHandler: endHandler,
    enableTouch: enableTouch,
    disableTouch: disableTouch,
    onCustomTap: onCustomTap,
    offCustomTap: offCustomTap,
    onCustomSwipe: onCustomSwipe,
    offCustomSwipe: offCustomSwipe
};
var _default = customEventMixins;

//# sourceMappingURL=data:application/json;base64,