"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _fullScreen = require("../utilities/fullScreen");
var _eventTypes = require("../eventTypes");
var _customEventTypes = require("../customEventTypes");
function enableFullScreen() {
    this.onFullscreenchange(this.fullscreenchangeHandler);
}
function disableFullScreen() {
    this.offFullscreenchange(this.fullscreenchangeHandler);
}
function exitFullScreen() {
    document.exitFullscreen();
}
function requestFullScreen(callback) {
    var domElement = this.getDOMElement();
    domElement.requestFullscreen().then(callback).catch(alert);
}
function onFullscreenchange(fullscreenchangeHandler) {
    var eventType = _eventTypes.FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.onEvent(eventType, handler);
}
function offFullscreenchange(fullscreenchangeHandler) {
    var eventType = _eventTypes.FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.offEvent(eventType, handler);
}
function fullscreenchangeHandler(event, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE;
    this.callCustomHandlers(customEventType, event, element);
}
function onCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
var fullScreenMixins = {
    enableFullScreen: enableFullScreen,
    disableFullScreen: disableFullScreen,
    isFullScreen: _fullScreen.isFullScreen,
    exitFullScreen: exitFullScreen,
    requestFullScreen: requestFullScreen,
    onFullscreenchange: onFullscreenchange,
    offFullscreenchange: offFullscreenchange,
    fullscreenchangeHandler: fullscreenchangeHandler,
    onCustomFullScreenChange: onCustomFullScreenChange,
    offCustomFullScreenChange: offCustomFullScreenChange
};
var _default = fullScreenMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZnVsbHNyZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc0Z1bGxTY3JlZW4gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2Z1bGxTY3JlZW5cIjtcbmltcG9ydCB7IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSB9IGZyb20gXCIuLi9ldmVudFR5cGVzXCI7XG5pbXBvcnQgeyBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vY3VzdG9tRXZlbnRUeXBlc1wiO1xuXG5mdW5jdGlvbiBlbmFibGVGdWxsU2NyZWVuKCkge1xuICB0aGlzLm9uRnVsbHNjcmVlbmNoYW5nZSh0aGlzLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZUZ1bGxTY3JlZW4oKSB7XG4gIHRoaXMub2ZmRnVsbHNjcmVlbmNoYW5nZSh0aGlzLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZXhpdEZ1bGxTY3JlZW4oKSB7XG4gIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RGdWxsU2NyZWVuKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSB0aGlzLmdldERPTUVsZW1lbnQoKTtcblxuICBkb21FbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKClcbiAgICAudGhlbihjYWxsYmFjaylcbiAgICAuY2F0Y2goYWxlcnQpO1xufVxuXG5mdW5jdGlvbiBvbkZ1bGxzY3JlZW5jaGFuZ2UoZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gRlVMTFNDUkVFTkNIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLm9uRXZlbnQoZXZlbnRUeXBlLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb2ZmRnVsbHNjcmVlbmNoYW5nZShmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcikge1xuICBjb25zdCBldmVudFR5cGUgPSBGVUxMU0NSRUVOQ0hBTkdFX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMub2ZmRXZlbnQoZXZlbnRUeXBlLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgY3VzdG9tRXZlbnRUeXBlID0gRlVMTF9TQ1JFRU5fQ0hBTkdFX0NVU1RPTV9FVkVOVF9UWVBFO1xuXG4gIHRoaXMuY2FsbEN1c3RvbUhhbmRsZXJzKGN1c3RvbUV2ZW50VHlwZSwgZXZlbnQsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvbkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UoZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgY3VzdG9tRXZlbnRUeXBlID0gRlVMTF9TQ1JFRU5fQ0hBTkdFX0NVU1RPTV9FVkVOVF9UWVBFLFxuICAgICAgICBjdXN0b21IYW5kbGVyID0gZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXI7IC8vL1xuXG4gIHRoaXMub25DdXN0b21FdmVudChjdXN0b21FdmVudFR5cGUsIGN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZDdXN0b21GdWxsU2NyZWVuQ2hhbmdlKGZ1bGxTY3JlZW5DaGFuZ2VDdXN0b21IYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGN1c3RvbUV2ZW50VHlwZSA9IEZVTExfU0NSRUVOX0NIQU5HRV9DVVNUT01fRVZFTlRfVFlQRSxcbiAgICAgICAgY3VzdG9tSGFuZGxlciA9IGZ1bGxTY3JlZW5DaGFuZ2VDdXN0b21IYW5kbGVyOyAvLy9cblxuICB0aGlzLm9mZkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmNvbnN0IGZ1bGxTY3JlZW5NaXhpbnMgPSB7XG4gIGVuYWJsZUZ1bGxTY3JlZW4sXG4gIGRpc2FibGVGdWxsU2NyZWVuLFxuICBpc0Z1bGxTY3JlZW4sXG4gIGV4aXRGdWxsU2NyZWVuLFxuICByZXF1ZXN0RnVsbFNjcmVlbixcbiAgb25GdWxsc2NyZWVuY2hhbmdlLFxuICBvZmZGdWxsc2NyZWVuY2hhbmdlLFxuICBmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcixcbiAgb25DdXN0b21GdWxsU2NyZWVuQ2hhbmdlLFxuICBvZmZDdXN0b21GdWxsU2NyZWVuQ2hhbmdlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdWxsU2NyZWVuTWl4aW5zO1xuIl0sIm5hbWVzIjpbImVuYWJsZUZ1bGxTY3JlZW4iLCJvbkZ1bGxzY3JlZW5jaGFuZ2UiLCJmdWxsc2NyZWVuY2hhbmdlSGFuZGxlciIsImRpc2FibGVGdWxsU2NyZWVuIiwib2ZmRnVsbHNjcmVlbmNoYW5nZSIsImV4aXRGdWxsU2NyZWVuIiwiZG9jdW1lbnQiLCJleGl0RnVsbHNjcmVlbiIsInJlcXVlc3RGdWxsU2NyZWVuIiwiY2FsbGJhY2siLCJkb21FbGVtZW50IiwiZ2V0RE9NRWxlbWVudCIsInJlcXVlc3RGdWxsc2NyZWVuIiwidGhlbiIsImNhdGNoIiwiYWxlcnQiLCJldmVudFR5cGUiLCJGVUxMU0NSRUVOQ0hBTkdFX0VWRU5UX1RZUEUiLCJoYW5kbGVyIiwib25FdmVudCIsIm9mZkV2ZW50IiwiZXZlbnQiLCJlbGVtZW50IiwiY3VzdG9tRXZlbnRUeXBlIiwiRlVMTF9TQ1JFRU5fQ0hBTkdFX0NVU1RPTV9FVkVOVF9UWVBFIiwiY2FsbEN1c3RvbUhhbmRsZXJzIiwib25DdXN0b21GdWxsU2NyZWVuQ2hhbmdlIiwiZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXIiLCJjdXN0b21IYW5kbGVyIiwib25DdXN0b21FdmVudCIsIm9mZkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UiLCJvZmZDdXN0b21FdmVudCIsImZ1bGxTY3JlZW5NaXhpbnMiLCJpc0Z1bGxTY3JlZW4iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBeUVBOzs7ZUFBQTs7OzBCQXZFNkI7MEJBQ2U7Z0NBQ1M7QUFFckQsU0FBU0E7SUFDUCxJQUFJLENBQUNDLGtCQUFrQixDQUFDLElBQUksQ0FBQ0MsdUJBQXVCO0FBQ3REO0FBRUEsU0FBU0M7SUFDUCxJQUFJLENBQUNDLG1CQUFtQixDQUFDLElBQUksQ0FBQ0YsdUJBQXVCO0FBQ3ZEO0FBRUEsU0FBU0c7SUFDUEMsU0FBU0MsY0FBYztBQUN6QjtBQUVBLFNBQVNDLGtCQUFrQkMsUUFBUTtJQUNqQyxJQUFNQyxhQUFhLElBQUksQ0FBQ0MsYUFBYTtJQUVyQ0QsV0FBV0UsaUJBQWlCLEdBQ3pCQyxJQUFJLENBQUNKLFVBQ0xLLEtBQUssQ0FBQ0M7QUFDWDtBQUVBLFNBQVNkLG1CQUFtQkMsdUJBQXVCO0lBQ2pELElBQU1jLFlBQVlDLHVDQUEyQixFQUN2Q0MsVUFBVWhCLHlCQUEwQixHQUFHO0lBRTdDLElBQUksQ0FBQ2lCLE9BQU8sQ0FBQ0gsV0FBV0U7QUFDMUI7QUFFQSxTQUFTZCxvQkFBb0JGLHVCQUF1QjtJQUNsRCxJQUFNYyxZQUFZQyx1Q0FBMkIsRUFDdkNDLFVBQVVoQix5QkFBMEIsR0FBRztJQUU3QyxJQUFJLENBQUNrQixRQUFRLENBQUNKLFdBQVdFO0FBQzNCO0FBRUEsU0FBU2hCLHdCQUF3Qm1CLEtBQUssRUFBRUMsT0FBTztJQUM3QyxJQUFNQyxrQkFBa0JDLHNEQUFvQztJQUU1RCxJQUFJLENBQUNDLGtCQUFrQixDQUFDRixpQkFBaUJGLE9BQU9DO0FBQ2xEO0FBRUEsU0FBU0kseUJBQXlCQyw2QkFBNkIsRUFBRUwsT0FBTztJQUN0RSxJQUFNQyxrQkFBa0JDLHNEQUFvQyxFQUN0REksZ0JBQWdCRCwrQkFBK0IsR0FBRztJQUV4RCxJQUFJLENBQUNFLGFBQWEsQ0FBQ04saUJBQWlCSyxlQUFlTjtBQUNyRDtBQUVBLFNBQVNRLDBCQUEwQkgsNkJBQTZCLEVBQUVMLE9BQU87SUFDdkUsSUFBTUMsa0JBQWtCQyxzREFBb0MsRUFDdERJLGdCQUFnQkQsK0JBQStCLEdBQUc7SUFFeEQsSUFBSSxDQUFDSSxjQUFjLENBQUNSLGlCQUFpQkssZUFBZU47QUFDdEQ7QUFFQSxJQUFNVSxtQkFBbUI7SUFDdkJoQyxrQkFBQUE7SUFDQUcsbUJBQUFBO0lBQ0E4QixjQUFBQSx3QkFBWTtJQUNaNUIsZ0JBQUFBO0lBQ0FHLG1CQUFBQTtJQUNBUCxvQkFBQUE7SUFDQUcscUJBQUFBO0lBQ0FGLHlCQUFBQTtJQUNBd0IsMEJBQUFBO0lBQ0FJLDJCQUFBQTtBQUNGO0lBRUEsV0FBZUUifQ==