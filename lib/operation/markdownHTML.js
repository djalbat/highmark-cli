"use strict";
import { pathUtilities } from "necessary";
import { processingUtilities } from "highmark-markdown";
import importer from "../importer";
import { readFile } from "../utilities/fileSystem";
import { retrieveOptions } from "../configuration";
import { classNameFromFilePath } from "../utilities/division";
import { nodeFromTokens, tokensFromContent } from "../utilities/markdown";
import { UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE } from "../messages";
var postprocess = processingUtilities.postprocess, concatenatePaths = pathUtilities.concatenatePaths;
export default function markdownHTMLOperation(proceed, abort, context) {
    var inputFileName = context.inputFileName, projectDirectoryName = context.projectDirectoryName, inputFilePath = concatenatePaths(projectDirectoryName, inputFileName), filePath = inputFilePath, content = readFile(filePath);
    if (content === null) {
        var message = UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE;
        console.log(message);
        abort();
        return;
    }
    var className = classNameFromFilePath(filePath), tokens = tokensFromContent(content), node = nodeFromTokens(tokens);
    if (node === null) {
        var message1 = UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE;
        console.log(message1);
        abort();
        return;
    }
    var options = retrieveOptions(), linesPerPage = options.linesPerPage, contentsDepth = options.contentsDepth, charactersPerLine = options.charactersPerLine, divisionClassName = className, divisionMarkdownNode = node; ///
    Object.assign(context, {
        tokens: tokens,
        importer: importer,
        linesPerPage: linesPerPage,
        contentsDepth: contentsDepth,
        nodeFromTokens: nodeFromTokens,
        tokensFromContent: tokensFromContent,
        charactersPerLine: charactersPerLine,
        divisionClassName: divisionClassName
    });
    var markdownNodes = postprocess(divisionMarkdownNode, context), markdownHTML = markdownNodes.reduce(function(markdownHTML, markdownNode) {
        var markdownNodeHTML = markdownNode.asHTML(context);
        markdownHTML = markdownHTML === null ? markdownNodeHTML : "".concat(markdownHTML).concat(markdownNodeHTML);
        return markdownHTML;
    }, null);
    Object.assign(context, {
        markdownHTML: markdownHTML
    });
    proceed();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vbWFya2Rvd25IVE1MLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcHJvY2Vzc2luZ1V0aWxpdGllcyB9IGZyb20gXCJoaWdobWFyay1tYXJrZG93blwiO1xuXG5pbXBvcnQgaW1wb3J0ZXIgZnJvbSBcIi4uL2ltcG9ydGVyXCI7XG5cbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9maWxlU3lzdGVtXCI7XG5pbXBvcnQgeyByZXRyaWV2ZU9wdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgY2xhc3NOYW1lRnJvbUZpbGVQYXRoIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kaXZpc2lvblwiO1xuaW1wb3J0IHsgbm9kZUZyb21Ub2tlbnMsIHRva2Vuc0Zyb21Db250ZW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9tYXJrZG93blwiO1xuaW1wb3J0IHsgVU5BQkxFX1RPX0NPTlZFUlRfTUFSS0RPV05fVE9fSFRNTF9NRVNTQUdFIH0gZnJvbSBcIi4uL21lc3NhZ2VzXCI7XG5cbmNvbnN0IHsgcG9zdHByb2Nlc3MgfSA9IHByb2Nlc3NpbmdVdGlsaXRpZXMsXG4gICAgICB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcmtkb3duSFRNTE9wZXJhdGlvbihwcm9jZWVkLCBhYm9ydCwgY29udGV4dCkge1xuICBjb25zdCB7IGlucHV0RmlsZU5hbWUsIHByb2plY3REaXJlY3RvcnlOYW1lIH0gPSBjb250ZXh0LFxuICAgICAgICBpbnB1dEZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0RGlyZWN0b3J5TmFtZSwgaW5wdXRGaWxlTmFtZSksXG4gICAgICAgIGZpbGVQYXRoID0gaW5wdXRGaWxlUGF0aCwgLy8vXG4gICAgICAgIGNvbnRlbnQgPSByZWFkRmlsZShmaWxlUGF0aCk7XG5cbiAgaWYgKGNvbnRlbnQgPT09IG51bGwpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gVU5BQkxFX1RPX0NPTlZFUlRfTUFSS0RPV05fVE9fSFRNTF9NRVNTQUdFO1xuXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICBhYm9ydCgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NOYW1lRnJvbUZpbGVQYXRoKGZpbGVQYXRoKSxcbiAgICAgICAgdG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBub2RlRnJvbVRva2Vucyh0b2tlbnMpO1xuXG4gIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IFVOQUJMRV9UT19DT05WRVJUX01BUktET1dOX1RPX0hUTUxfTUVTU0FHRTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4gICAgYWJvcnQoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSByZXRyaWV2ZU9wdGlvbnMoKSxcbiAgICAgICAgeyBsaW5lc1BlclBhZ2UsXG4gICAgICAgICAgY29udGVudHNEZXB0aCxcbiAgICAgICAgICBjaGFyYWN0ZXJzUGVyTGluZSB9ID0gb3B0aW9ucyxcbiAgICAgICAgZGl2aXNpb25DbGFzc05hbWUgPSBjbGFzc05hbWUsICAvLy9cbiAgICAgICAgZGl2aXNpb25NYXJrZG93bk5vZGUgPSBub2RlOyAgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgdG9rZW5zLFxuICAgIGltcG9ydGVyLFxuICAgIGxpbmVzUGVyUGFnZSxcbiAgICBjb250ZW50c0RlcHRoLFxuICAgIG5vZGVGcm9tVG9rZW5zLFxuICAgIHRva2Vuc0Zyb21Db250ZW50LFxuICAgIGNoYXJhY3RlcnNQZXJMaW5lLFxuICAgIGRpdmlzaW9uQ2xhc3NOYW1lXG4gIH0pO1xuXG4gIGNvbnN0IG1hcmtkb3duTm9kZXMgPSBwb3N0cHJvY2VzcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgY29udGV4dCksXG4gICAgICAgIG1hcmtkb3duSFRNTCA9IG1hcmtkb3duTm9kZXMucmVkdWNlKChtYXJrZG93bkhUTUwsIG1hcmtkb3duTm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1hcmtkb3duTm9kZUhUTUwgPSBtYXJrZG93bk5vZGUuYXNIVE1MKGNvbnRleHQpO1xuXG4gICAgICAgICAgbWFya2Rvd25IVE1MID0gKG1hcmtkb3duSFRNTCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25Ob2RlSFRNTCA6ICAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHttYXJrZG93bkhUTUx9JHttYXJrZG93bk5vZGVIVE1MfWA7XG5cbiAgICAgICAgICByZXR1cm4gbWFya2Rvd25IVE1MO1xuICAgICAgICB9LCBudWxsKTtcblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICBtYXJrZG93bkhUTUxcbiAgfSk7XG5cbiAgcHJvY2VlZCgpO1xufVxuIl0sIm5hbWVzIjpbInBhdGhVdGlsaXRpZXMiLCJwcm9jZXNzaW5nVXRpbGl0aWVzIiwiaW1wb3J0ZXIiLCJyZWFkRmlsZSIsInJldHJpZXZlT3B0aW9ucyIsImNsYXNzTmFtZUZyb21GaWxlUGF0aCIsIm5vZGVGcm9tVG9rZW5zIiwidG9rZW5zRnJvbUNvbnRlbnQiLCJVTkFCTEVfVE9fQ09OVkVSVF9NQVJLRE9XTl9UT19IVE1MX01FU1NBR0UiLCJwb3N0cHJvY2VzcyIsImNvbmNhdGVuYXRlUGF0aHMiLCJtYXJrZG93bkhUTUxPcGVyYXRpb24iLCJwcm9jZWVkIiwiYWJvcnQiLCJjb250ZXh0IiwiaW5wdXRGaWxlTmFtZSIsInByb2plY3REaXJlY3RvcnlOYW1lIiwiaW5wdXRGaWxlUGF0aCIsImZpbGVQYXRoIiwiY29udGVudCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwiY2xhc3NOYW1lIiwidG9rZW5zIiwibm9kZSIsIm9wdGlvbnMiLCJsaW5lc1BlclBhZ2UiLCJjb250ZW50c0RlcHRoIiwiY2hhcmFjdGVyc1BlckxpbmUiLCJkaXZpc2lvbkNsYXNzTmFtZSIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiT2JqZWN0IiwiYXNzaWduIiwibWFya2Rvd25Ob2RlcyIsIm1hcmtkb3duSFRNTCIsInJlZHVjZSIsIm1hcmtkb3duTm9kZSIsIm1hcmtkb3duTm9kZUhUTUwiLCJhc0hUTUwiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsYUFBYSxRQUFRLFlBQVk7QUFDMUMsU0FBU0MsbUJBQW1CLFFBQVEsb0JBQW9CO0FBRXhELE9BQU9DLGNBQWMsY0FBYztBQUVuQyxTQUFTQyxRQUFRLFFBQVEsMEJBQTBCO0FBQ25ELFNBQVNDLGVBQWUsUUFBUSxtQkFBbUI7QUFDbkQsU0FBU0MscUJBQXFCLFFBQVEsd0JBQXdCO0FBQzlELFNBQVNDLGNBQWMsRUFBRUMsaUJBQWlCLFFBQVEsd0JBQXdCO0FBQzFFLFNBQVNDLDBDQUEwQyxRQUFRLGNBQWM7QUFFekUsSUFBTSxBQUFFQyxjQUFnQlIsb0JBQWhCUSxhQUNGLEFBQUVDLG1CQUFxQlYsY0FBckJVO0FBRVIsZUFBZSxTQUFTQyxzQkFBc0JDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxPQUFPO0lBQ25FLElBQVFDLGdCQUF3Q0QsUUFBeENDLGVBQWVDLHVCQUF5QkYsUUFBekJFLHNCQUNqQkMsZ0JBQWdCUCxpQkFBaUJNLHNCQUFzQkQsZ0JBQ3ZERyxXQUFXRCxlQUNYRSxVQUFVaEIsU0FBU2U7SUFFekIsSUFBSUMsWUFBWSxNQUFNO1FBQ3BCLElBQU1DLFVBQVVaO1FBRWhCYSxRQUFRQyxHQUFHLENBQUNGO1FBRVpQO1FBRUE7SUFDRjtJQUVBLElBQU1VLFlBQVlsQixzQkFBc0JhLFdBQ2xDTSxTQUFTakIsa0JBQWtCWSxVQUMzQk0sT0FBT25CLGVBQWVrQjtJQUU1QixJQUFJQyxTQUFTLE1BQU07UUFDakIsSUFBTUwsV0FBVVo7UUFFaEJhLFFBQVFDLEdBQUcsQ0FBQ0Y7UUFFWlA7UUFFQTtJQUNGO0lBRUEsSUFBTWEsVUFBVXRCLG1CQUNSdUIsZUFFc0JELFFBRnRCQyxjQUNBQyxnQkFDc0JGLFFBRHRCRSxlQUNBQyxvQkFBc0JILFFBQXRCRyxtQkFDRkMsb0JBQW9CUCxXQUNwQlEsdUJBQXVCTixNQUFPLEdBQUc7SUFFdkNPLE9BQU9DLE1BQU0sQ0FBQ25CLFNBQVM7UUFDckJVLFFBQUFBO1FBQ0F0QixVQUFBQTtRQUNBeUIsY0FBQUE7UUFDQUMsZUFBQUE7UUFDQXRCLGdCQUFBQTtRQUNBQyxtQkFBQUE7UUFDQXNCLG1CQUFBQTtRQUNBQyxtQkFBQUE7SUFDRjtJQUVBLElBQU1JLGdCQUFnQnpCLFlBQVlzQixzQkFBc0JqQixVQUNsRHFCLGVBQWVELGNBQWNFLE1BQU0sQ0FBQyxTQUFDRCxjQUFjRTtRQUNqRCxJQUFNQyxtQkFBbUJELGFBQWFFLE1BQU0sQ0FBQ3pCO1FBRTdDcUIsZUFBZSxBQUFDQSxpQkFBaUIsT0FDaEJHLG1CQUNDLEFBQUMsR0FBaUJBLE9BQWZILGNBQWdDLE9BQWpCRztRQUVwQyxPQUFPSDtJQUNULEdBQUc7SUFFVEgsT0FBT0MsTUFBTSxDQUFDbkIsU0FBUztRQUNyQnFCLGNBQUFBO0lBQ0Y7SUFFQXZCO0FBQ0YifQ==