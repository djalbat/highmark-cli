"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return markdownStylesCSSOperation;
    }
});
var _highmarkclient = require("highmark-client");
var _highmarkmarkdown = require("highmark-markdown");
var _constants = require("../constants");
var _division = require("../utilities/division");
var _fileSystem = require("../utilities/fileSystem");
var _filePath = require("../utilities/filePath");
var CLIENT_DIVS_SELECTOR_STRING = _highmarkclient.constants.DIVS_SELECTOR_STRING, cssFromMarkdownStyleAndSelectorString = _highmarkmarkdown.cssUtilities.cssFromMarkdownStyleAndSelectorString;
function markdownStylesCSSOperation(proceed, abort, context) {
    var client = context.client, projectDirectoryName = context.projectDirectoryName, projectDirectoryPath = projectDirectoryName, markdownStyleFilePaths = [];
    (0, _fileSystem.readDirectory)(projectDirectoryPath, function(filePath) {
        var filePathMarkdownStyleFilePath = (0, _filePath.isFilePathMarkdownStyleFilePath)(filePath);
        if (filePathMarkdownStyleFilePath) {
            var markdownStyleFilePath = filePath, filePathDefaultMarkdownStyleFilePath = (0, _filePath.isFilePathDefaultMarkdownStyleFilePath)(filePath);
            filePathDefaultMarkdownStyleFilePath ? markdownStyleFilePaths.unshift(markdownStyleFilePath) : markdownStyleFilePaths.push(markdownStyleFilePath);
        }
    });
    var selectorString = client ? CLIENT_DIVS_SELECTOR_STRING : _constants.DIVS_SELECTOR_STRING, markdownStyle = _highmarkmarkdown.defaultMarkdownStyle, defaultCSS = cssFromMarkdownStyleAndSelectorString(markdownStyle, selectorString);
    var markdownStylesCSS = defaultCSS; ///
    markdownStyleFilePaths.forEach(function(markdownStyleFilePath) {
        var selectorString = selectorStringFromMarkdownStyleFilePathAndClient(markdownStyleFilePath, client), markdownStyle = markdownStyleFromMarkdownStyleFilePath(markdownStyleFilePath), css = cssFromMarkdownStyleAndSelectorString(markdownStyle, selectorString, markdownStylesCSS); ///
        markdownStylesCSS = "".concat(markdownStylesCSS).concat(css);
    });
    Object.assign(context, {
        markdownStylesCSS: markdownStylesCSS
    });
    proceed();
}
function markdownStyleFromMarkdownStyleFilePath(markdownStyleFilePath) {
    var filePath = markdownStyleFilePath, content = (0, _fileSystem.readFile)(filePath), markdownStyle = content; ///
    return markdownStyle;
}
function selectorStringFromMarkdownStyleFilePathAndClient(markdownStyleFilePath, client) {
    var selectorString = client ? CLIENT_DIVS_SELECTOR_STRING : _constants.DIVS_SELECTOR_STRING;
    var filePath = markdownStyleFilePath, className = (0, _division.classNameFromFilePath)(filePath);
    if (className !== null) {
        selectorString = "".concat(selectorString, ".").concat(className);
    }
    return selectorString;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vbWFya2Rvd25TdHlsZXNDU1MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gXCJoaWdobWFyay1jbGllbnRcIjtcbmltcG9ydCB7IGNzc1V0aWxpdGllcywgZGVmYXVsdE1hcmtkb3duU3R5bGUgfSBmcm9tIFwiaGlnaG1hcmstbWFya2Rvd25cIjtcblxuaW1wb3J0IHsgRElWU19TRUxFQ1RPUl9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjbGFzc05hbWVGcm9tRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RpdmlzaW9uXCI7XG5pbXBvcnQgeyByZWFkRmlsZSwgcmVhZERpcmVjdG9yeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvZmlsZVN5c3RlbVwiO1xuaW1wb3J0IHsgaXNGaWxlUGF0aE1hcmtkb3duU3R5bGVGaWxlUGF0aCwgaXNGaWxlUGF0aERlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbGVQYXRoXCI7XG5cbmNvbnN0IHsgRElWU19TRUxFQ1RPUl9TVFJJTkc6IENMSUVOVF9ESVZTX1NFTEVDVE9SX1NUUklORyB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBjc3NGcm9tTWFya2Rvd25TdHlsZUFuZFNlbGVjdG9yU3RyaW5nIH0gPSBjc3NVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcmtkb3duU3R5bGVzQ1NTT3BlcmF0aW9uKHByb2NlZWQsIGFib3J0LCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY2xpZW50LCBwcm9qZWN0RGlyZWN0b3J5TmFtZSB9ID0gY29udGV4dCxcbiAgICAgICAgcHJvamVjdERpcmVjdG9yeVBhdGggPSBwcm9qZWN0RGlyZWN0b3J5TmFtZSwgIC8vL1xuICAgICAgICBtYXJrZG93blN0eWxlRmlsZVBhdGhzID0gW107XG5cbiAgcmVhZERpcmVjdG9yeShwcm9qZWN0RGlyZWN0b3J5UGF0aCwgKGZpbGVQYXRoKSA9PiB7XG4gICAgY29uc3QgZmlsZVBhdGhNYXJrZG93blN0eWxlRmlsZVBhdGggPSBpc0ZpbGVQYXRoTWFya2Rvd25TdHlsZUZpbGVQYXRoKGZpbGVQYXRoKTtcblxuICAgIGlmIChmaWxlUGF0aE1hcmtkb3duU3R5bGVGaWxlUGF0aCkge1xuICAgICAgY29uc3QgbWFya2Rvd25TdHlsZUZpbGVQYXRoID0gZmlsZVBhdGgsXG4gICAgICAgICAgICBmaWxlUGF0aERlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGggPSBpc0ZpbGVQYXRoRGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgICAgIGZpbGVQYXRoRGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aCA/XG4gICAgICAgIG1hcmtkb3duU3R5bGVGaWxlUGF0aHMudW5zaGlmdChtYXJrZG93blN0eWxlRmlsZVBhdGgpIDpcbiAgICAgICAgICBtYXJrZG93blN0eWxlRmlsZVBhdGhzLnB1c2gobWFya2Rvd25TdHlsZUZpbGVQYXRoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHNlbGVjdG9yU3RyaW5nID0gY2xpZW50ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIENMSUVOVF9ESVZTX1NFTEVDVE9SX1NUUklORyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIERJVlNfU0VMRUNUT1JfU1RSSU5HLFxuICAgICAgICBtYXJrZG93blN0eWxlID0gZGVmYXVsdE1hcmtkb3duU3R5bGUsIC8vL1xuICAgICAgICBkZWZhdWx0Q1NTID0gY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvclN0cmluZyhtYXJrZG93blN0eWxlLCBzZWxlY3RvclN0cmluZyk7XG5cbiAgbGV0IG1hcmtkb3duU3R5bGVzQ1NTID0gZGVmYXVsdENTUzsgLy8vXG5cbiAgbWFya2Rvd25TdHlsZUZpbGVQYXRocy5mb3JFYWNoKChtYXJrZG93blN0eWxlRmlsZVBhdGgpID0+IHtcbiAgICBjb25zdCBzZWxlY3RvclN0cmluZyA9IHNlbGVjdG9yU3RyaW5nRnJvbU1hcmtkb3duU3R5bGVGaWxlUGF0aEFuZENsaWVudChtYXJrZG93blN0eWxlRmlsZVBhdGgsIGNsaWVudCksXG4gICAgICAgICAgbWFya2Rvd25TdHlsZSA9IG1hcmtkb3duU3R5bGVGcm9tTWFya2Rvd25TdHlsZUZpbGVQYXRoKG1hcmtkb3duU3R5bGVGaWxlUGF0aCksXG4gICAgICAgICAgY3NzID0gY3NzRnJvbU1hcmtkb3duU3R5bGVBbmRTZWxlY3RvclN0cmluZyhtYXJrZG93blN0eWxlLCBzZWxlY3RvclN0cmluZywgbWFya2Rvd25TdHlsZXNDU1MpOyAgLy8vXG5cbiAgICBtYXJrZG93blN0eWxlc0NTUyA9IGAke21hcmtkb3duU3R5bGVzQ1NTfSR7Y3NzfWA7XG4gIH0pO1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIG1hcmtkb3duU3R5bGVzQ1NTXG4gIH0pO1xuXG4gIHByb2NlZWQoKTtcbn1cblxuZnVuY3Rpb24gbWFya2Rvd25TdHlsZUZyb21NYXJrZG93blN0eWxlRmlsZVBhdGgobWFya2Rvd25TdHlsZUZpbGVQYXRoKSB7XG4gIGNvbnN0IGZpbGVQYXRoID0gbWFya2Rvd25TdHlsZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgY29udGVudCA9IHJlYWRGaWxlKGZpbGVQYXRoKSxcbiAgICAgICAgbWFya2Rvd25TdHlsZSA9IGNvbnRlbnQ7ICAvLy9cblxuICByZXR1cm4gbWFya2Rvd25TdHlsZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JTdHJpbmdGcm9tTWFya2Rvd25TdHlsZUZpbGVQYXRoQW5kQ2xpZW50KG1hcmtkb3duU3R5bGVGaWxlUGF0aCwgY2xpZW50KSB7XG4gIGxldCBzZWxlY3RvclN0cmluZyA9IGNsaWVudCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgQ0xJRU5UX0RJVlNfU0VMRUNUT1JfU1RSSU5HIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIERJVlNfU0VMRUNUT1JfU1RSSU5HO1xuXG4gIGNvbnN0IGZpbGVQYXRoID0gbWFya2Rvd25TdHlsZUZpbGVQYXRoLCAgLy8vXG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZUZyb21GaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgaWYgKGNsYXNzTmFtZSAhPT0gbnVsbCkge1xuICAgIHNlbGVjdG9yU3RyaW5nID0gYCR7c2VsZWN0b3JTdHJpbmd9LiR7Y2xhc3NOYW1lfWA7XG4gIH1cblxuICByZXR1cm4gc2VsZWN0b3JTdHJpbmc7XG59XG4iXSwibmFtZXMiOlsibWFya2Rvd25TdHlsZXNDU1NPcGVyYXRpb24iLCJESVZTX1NFTEVDVE9SX1NUUklORyIsIkNMSUVOVF9ESVZTX1NFTEVDVE9SX1NUUklORyIsImNvbnN0YW50cyIsImNzc0Zyb21NYXJrZG93blN0eWxlQW5kU2VsZWN0b3JTdHJpbmciLCJjc3NVdGlsaXRpZXMiLCJwcm9jZWVkIiwiYWJvcnQiLCJjb250ZXh0IiwiY2xpZW50IiwicHJvamVjdERpcmVjdG9yeU5hbWUiLCJwcm9qZWN0RGlyZWN0b3J5UGF0aCIsIm1hcmtkb3duU3R5bGVGaWxlUGF0aHMiLCJyZWFkRGlyZWN0b3J5IiwiZmlsZVBhdGgiLCJmaWxlUGF0aE1hcmtkb3duU3R5bGVGaWxlUGF0aCIsImlzRmlsZVBhdGhNYXJrZG93blN0eWxlRmlsZVBhdGgiLCJtYXJrZG93blN0eWxlRmlsZVBhdGgiLCJmaWxlUGF0aERlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoRGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aCIsInVuc2hpZnQiLCJwdXNoIiwic2VsZWN0b3JTdHJpbmciLCJtYXJrZG93blN0eWxlIiwiZGVmYXVsdE1hcmtkb3duU3R5bGUiLCJkZWZhdWx0Q1NTIiwibWFya2Rvd25TdHlsZXNDU1MiLCJmb3JFYWNoIiwic2VsZWN0b3JTdHJpbmdGcm9tTWFya2Rvd25TdHlsZUZpbGVQYXRoQW5kQ2xpZW50IiwibWFya2Rvd25TdHlsZUZyb21NYXJrZG93blN0eWxlRmlsZVBhdGgiLCJjc3MiLCJPYmplY3QiLCJhc3NpZ24iLCJjb250ZW50IiwicmVhZEZpbGUiLCJjbGFzc05hbWUiLCJjbGFzc05hbWVGcm9tRmlsZVBhdGgiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWFBOzs7ZUFBd0JBOzs7OEJBWEU7Z0NBQ3lCO3lCQUVkO3dCQUNDOzBCQUNFO3dCQUNnRDtBQUV4RixJQUFRQyxBQUFzQkMsOEJBQWdDQyx5QkFBUyxDQUEvREYsc0JBQ0YsQUFBRUcsd0NBQTBDQyw4QkFBWSxDQUF0REQ7QUFFTyxTQUFTSiwyQkFBMkJNLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxPQUFPO0lBQ3hFLElBQVFDLFNBQWlDRCxRQUFqQ0MsUUFBUUMsdUJBQXlCRixRQUF6QkUsc0JBQ1ZDLHVCQUF1QkQsc0JBQ3ZCRSx5QkFBeUIsRUFBRTtJQUVqQ0MsSUFBQUEseUJBQWEsRUFBQ0Ysc0JBQXNCLFNBQUNHO1FBQ25DLElBQU1DLGdDQUFnQ0MsSUFBQUEseUNBQStCLEVBQUNGO1FBRXRFLElBQUlDLCtCQUErQjtZQUNqQyxJQUFNRSx3QkFBd0JILFVBQ3hCSSx1Q0FBdUNDLElBQUFBLGdEQUFzQyxFQUFDTDtZQUVwRkksdUNBQ0VOLHVCQUF1QlEsT0FBTyxDQUFDSCx5QkFDN0JMLHVCQUF1QlMsSUFBSSxDQUFDSjtRQUNsQztJQUNGO0lBRUEsSUFBTUssaUJBQWlCYixTQUNFUCw4QkFDRUQsK0JBQW9CLEVBQ3pDc0IsZ0JBQWdCQyxzQ0FBb0IsRUFDcENDLGFBQWFyQixzQ0FBc0NtQixlQUFlRDtJQUV4RSxJQUFJSSxvQkFBb0JELFlBQVksR0FBRztJQUV2Q2IsdUJBQXVCZSxPQUFPLENBQUMsU0FBQ1Y7UUFDOUIsSUFBTUssaUJBQWlCTSxpREFBaURYLHVCQUF1QlIsU0FDekZjLGdCQUFnQk0sdUNBQXVDWix3QkFDdkRhLE1BQU0xQixzQ0FBc0NtQixlQUFlRCxnQkFBZ0JJLG9CQUFxQixHQUFHO1FBRXpHQSxvQkFBb0IsQUFBQyxHQUFzQkksT0FBcEJKLG1CQUF3QixPQUFKSTtJQUM3QztJQUVBQyxPQUFPQyxNQUFNLENBQUN4QixTQUFTO1FBQ3JCa0IsbUJBQUFBO0lBQ0Y7SUFFQXBCO0FBQ0Y7QUFFQSxTQUFTdUIsdUNBQXVDWixxQkFBcUI7SUFDbkUsSUFBTUgsV0FBV0csdUJBQ1hnQixVQUFVQyxJQUFBQSxvQkFBUSxFQUFDcEIsV0FDbkJTLGdCQUFnQlUsU0FBVSxHQUFHO0lBRW5DLE9BQU9WO0FBQ1Q7QUFFQSxTQUFTSyxpREFBaURYLHFCQUFxQixFQUFFUixNQUFNO0lBQ3JGLElBQUlhLGlCQUFpQmIsU0FDRVAsOEJBQ0VELCtCQUFvQjtJQUU3QyxJQUFNYSxXQUFXRyx1QkFDWGtCLFlBQVlDLElBQUFBLCtCQUFxQixFQUFDdEI7SUFFeEMsSUFBSXFCLGNBQWMsTUFBTTtRQUN0QmIsaUJBQWlCLEFBQUMsR0FBb0JhLE9BQWxCYixnQkFBZSxLQUFhLE9BQVZhO0lBQ3hDO0lBRUEsT0FBT2I7QUFDVCJ9