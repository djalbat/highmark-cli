"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return markdownHTMLOperation;
    }
});
var _necessary = require("necessary");
var _importer = /*#__PURE__*/ _interop_require_default(require("../importer"));
var _fileSystem = require("../utilities/fileSystem");
var _configuration = require("../configuration");
var _division = require("../utilities/division");
var _markdown = require("../utilities/markdown");
var _messages = require("../messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var concatenatePaths = _necessary.pathUtilities.concatenatePaths;
function markdownHTMLOperation(proceed, abort, context) {
    var inputFileName = context.inputFileName, projectDirectoryName = context.projectDirectoryName, inputFilePath = concatenatePaths(projectDirectoryName, inputFileName), filePath = inputFilePath, content = (0, _fileSystem.readFile)(filePath);
    if (content === null) {
        var message = _messages.UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE;
        console.log(message);
        abort();
        return;
    }
    var className = (0, _division.classNameFromFilePath)(filePath), tokens = (0, _markdown.tokensFromContent)(content), node = (0, _markdown.nodeFromTokens)(tokens);
    if (node === null) {
        var message1 = _messages.UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE;
        console.log(message1);
        abort();
        return;
    }
    var options = (0, _configuration.retrieveOptions)(), linesPerPage = options.linesPerPage, contentsDepth = options.contentsDepth, charactersPerLine = options.charactersPerLine, divisionClassName = className, divisionMarkdownNode = node; ///
    Object.assign(context, {
        tokens: tokens,
        importer: _importer.default,
        linesPerPage: linesPerPage,
        contentsDepth: contentsDepth,
        nodeFromTokens: _markdown.nodeFromTokens,
        tokensFromContent: _markdown.tokensFromContent,
        charactersPerLine: charactersPerLine,
        divisionClassName: divisionClassName
    });
    var markdownNodes = postprocess(divisionMarkdownNode, context), markdownHTML = markdownNodes.reduce(function(markdownHTML, markdownNode) {
        var markdownNodeHTML = markdownNode.asHTML(context);
        markdownHTML = markdownHTML === null ? markdownNodeHTML : "".concat(markdownHTML).concat(markdownNodeHTML);
        return markdownHTML;
    }, null);
    Object.assign(context, {
        markdownHTML: markdownHTML
    });
    proceed();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vbWFya2Rvd25IVE1MLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgaW1wb3J0ZXIgZnJvbSBcIi4uL2ltcG9ydGVyXCI7XG5cbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9maWxlU3lzdGVtXCI7XG5pbXBvcnQgeyByZXRyaWV2ZU9wdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgY2xhc3NOYW1lRnJvbUZpbGVQYXRoIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kaXZpc2lvblwiO1xuaW1wb3J0IHsgbm9kZUZyb21Ub2tlbnMsIHRva2Vuc0Zyb21Db250ZW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9tYXJrZG93blwiO1xuaW1wb3J0IHsgVU5BQkxFX1RPX0NPTlZFUlRfTUFSS0RPV05fVE9fSFRNTF9NRVNTQUdFIH0gZnJvbSBcIi4uL21lc3NhZ2VzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFya2Rvd25IVE1MT3BlcmF0aW9uKHByb2NlZWQsIGFib3J0LCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgaW5wdXRGaWxlTmFtZSwgcHJvamVjdERpcmVjdG9yeU5hbWUgfSA9IGNvbnRleHQsXG4gICAgICAgIGlucHV0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3REaXJlY3RvcnlOYW1lLCBpbnB1dEZpbGVOYW1lKSxcbiAgICAgICAgZmlsZVBhdGggPSBpbnB1dEZpbGVQYXRoLCAvLy9cbiAgICAgICAgY29udGVudCA9IHJlYWRGaWxlKGZpbGVQYXRoKTtcblxuICBpZiAoY29udGVudCA9PT0gbnVsbCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBVTkFCTEVfVE9fQ09OVkVSVF9NQVJLRE9XTl9UT19IVE1MX01FU1NBR0U7XG5cbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuICAgIGFib3J0KCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVGcm9tRmlsZVBhdGgoZmlsZVBhdGgpLFxuICAgICAgICB0b2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudChjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IG5vZGVGcm9tVG9rZW5zKHRva2Vucyk7XG5cbiAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gVU5BQkxFX1RPX0NPTlZFUlRfTUFSS0RPV05fVE9fSFRNTF9NRVNTQUdFO1xuXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICBhYm9ydCgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHJldHJpZXZlT3B0aW9ucygpLFxuICAgICAgICB7IGxpbmVzUGVyUGFnZSxcbiAgICAgICAgICBjb250ZW50c0RlcHRoLFxuICAgICAgICAgIGNoYXJhY3RlcnNQZXJMaW5lIH0gPSBvcHRpb25zLFxuICAgICAgICBkaXZpc2lvbkNsYXNzTmFtZSA9IGNsYXNzTmFtZSwgIC8vL1xuICAgICAgICBkaXZpc2lvbk1hcmtkb3duTm9kZSA9IG5vZGU7ICAvLy9cblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICB0b2tlbnMsXG4gICAgaW1wb3J0ZXIsXG4gICAgbGluZXNQZXJQYWdlLFxuICAgIGNvbnRlbnRzRGVwdGgsXG4gICAgbm9kZUZyb21Ub2tlbnMsXG4gICAgdG9rZW5zRnJvbUNvbnRlbnQsXG4gICAgY2hhcmFjdGVyc1BlckxpbmUsXG4gICAgZGl2aXNpb25DbGFzc05hbWVcbiAgfSk7XG5cbiAgY29uc3QgbWFya2Rvd25Ob2RlcyA9IHBvc3Rwcm9jZXNzKGRpdmlzaW9uTWFya2Rvd25Ob2RlLCBjb250ZXh0KSxcbiAgICAgICAgbWFya2Rvd25IVE1MID0gbWFya2Rvd25Ob2Rlcy5yZWR1Y2UoKG1hcmtkb3duSFRNTCwgbWFya2Rvd25Ob2RlKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWFya2Rvd25Ob2RlSFRNTCA9IG1hcmtkb3duTm9kZS5hc0hUTUwoY29udGV4dCk7XG5cbiAgICAgICAgICBtYXJrZG93bkhUTUwgPSAobWFya2Rvd25IVE1MID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZG93bk5vZGVIVE1MIDogIC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke21hcmtkb3duSFRNTH0ke21hcmtkb3duTm9kZUhUTUx9YDtcblxuICAgICAgICAgIHJldHVybiBtYXJrZG93bkhUTUw7XG4gICAgICAgIH0sIG51bGwpO1xuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIG1hcmtkb3duSFRNTFxuICB9KTtcblxuICBwcm9jZWVkKCk7XG59XG4iXSwibmFtZXMiOlsibWFya2Rvd25IVE1MT3BlcmF0aW9uIiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJwcm9jZWVkIiwiYWJvcnQiLCJjb250ZXh0IiwiaW5wdXRGaWxlTmFtZSIsInByb2plY3REaXJlY3RvcnlOYW1lIiwiaW5wdXRGaWxlUGF0aCIsImZpbGVQYXRoIiwiY29udGVudCIsInJlYWRGaWxlIiwibWVzc2FnZSIsIlVOQUJMRV9UT19DT05WRVJUX01BUktET1dOX1RPX0hUTUxfTUVTU0FHRSIsImNvbnNvbGUiLCJsb2ciLCJjbGFzc05hbWUiLCJjbGFzc05hbWVGcm9tRmlsZVBhdGgiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQ29udGVudCIsIm5vZGUiLCJub2RlRnJvbVRva2VucyIsIm9wdGlvbnMiLCJyZXRyaWV2ZU9wdGlvbnMiLCJsaW5lc1BlclBhZ2UiLCJjb250ZW50c0RlcHRoIiwiY2hhcmFjdGVyc1BlckxpbmUiLCJkaXZpc2lvbkNsYXNzTmFtZSIsImRpdmlzaW9uTWFya2Rvd25Ob2RlIiwiT2JqZWN0IiwiYXNzaWduIiwiaW1wb3J0ZXIiLCJtYXJrZG93bk5vZGVzIiwicG9zdHByb2Nlc3MiLCJtYXJrZG93bkhUTUwiLCJyZWR1Y2UiLCJtYXJrZG93bk5vZGUiLCJtYXJrZG93bk5vZGVIVE1MIiwiYXNIVE1MIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFjQTs7O2VBQXdCQTs7O3lCQVpNOytEQUVUOzBCQUVJOzZCQUNPO3dCQUNNO3dCQUNZO3dCQUNTOzs7Ozs7QUFFM0QsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRDtBQUVPLFNBQVNELHNCQUFzQkcsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDbkUsSUFBUUMsZ0JBQXdDRCxRQUF4Q0MsZUFBZUMsdUJBQXlCRixRQUF6QkUsc0JBQ2pCQyxnQkFBZ0JQLGlCQUFpQk0sc0JBQXNCRCxnQkFDdkRHLFdBQVdELGVBQ1hFLFVBQVVDLElBQUFBLG9CQUFRLEVBQUNGO0lBRXpCLElBQUlDLFlBQVksTUFBTTtRQUNwQixJQUFNRSxVQUFVQyxvREFBMEM7UUFFMURDLFFBQVFDLEdBQUcsQ0FBQ0g7UUFFWlI7UUFFQTtJQUNGO0lBRUEsSUFBTVksWUFBWUMsSUFBQUEsK0JBQXFCLEVBQUNSLFdBQ2xDUyxTQUFTQyxJQUFBQSwyQkFBaUIsRUFBQ1QsVUFDM0JVLE9BQU9DLElBQUFBLHdCQUFjLEVBQUNIO0lBRTVCLElBQUlFLFNBQVMsTUFBTTtRQUNqQixJQUFNUixXQUFVQyxvREFBMEM7UUFFMURDLFFBQVFDLEdBQUcsQ0FBQ0g7UUFFWlI7UUFFQTtJQUNGO0lBRUEsSUFBTWtCLFVBQVVDLElBQUFBLDhCQUFlLEtBQ3ZCQyxlQUVzQkYsUUFGdEJFLGNBQ0FDLGdCQUNzQkgsUUFEdEJHLGVBQ0FDLG9CQUFzQkosUUFBdEJJLG1CQUNGQyxvQkFBb0JYLFdBQ3BCWSx1QkFBdUJSLE1BQU8sR0FBRztJQUV2Q1MsT0FBT0MsTUFBTSxDQUFDekIsU0FBUztRQUNyQmEsUUFBQUE7UUFDQWEsVUFBQUEsaUJBQVE7UUFDUlAsY0FBQUE7UUFDQUMsZUFBQUE7UUFDQUosZ0JBQUFBLHdCQUFjO1FBQ2RGLG1CQUFBQSwyQkFBaUI7UUFDakJPLG1CQUFBQTtRQUNBQyxtQkFBQUE7SUFDRjtJQUVBLElBQU1LLGdCQUFnQkMsWUFBWUwsc0JBQXNCdkIsVUFDbEQ2QixlQUFlRixjQUFjRyxNQUFNLENBQUMsU0FBQ0QsY0FBY0U7UUFDakQsSUFBTUMsbUJBQW1CRCxhQUFhRSxNQUFNLENBQUNqQztRQUU3QzZCLGVBQWUsQUFBQ0EsaUJBQWlCLE9BQ2hCRyxtQkFDQyxBQUFDLEdBQWlCQSxPQUFmSCxjQUFnQyxPQUFqQkc7UUFFcEMsT0FBT0g7SUFDVCxHQUFHO0lBRVRMLE9BQU9DLE1BQU0sQ0FBQ3pCLFNBQVM7UUFDckI2QixjQUFBQTtJQUNGO0lBRUEvQjtBQUNGIn0=