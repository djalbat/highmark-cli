"use strict";
import { pathUtilities, fileSystemUtilities } from "necessary";
import { isEntryNameHiddenName } from "../utilities/path";
import { UNABLE_TO_COPY_FILE_MESSAGE, UNABLE_TO_READ_FILE_MESSAGE, UNABLE_TO_WRITE_FILE_MESSAGE, UNABLE_TO_READ_DIRECTORY_MESSAGE, UNABLE_TO_CREATE_DIRECTORY_MESSAGE } from "../messages";
var concatenatePaths = pathUtilities.concatenatePaths, isEntryFile = fileSystemUtilities.isEntryFile, checkEntryExists = fileSystemUtilities.checkEntryExists, copyFileAsync = fileSystemUtilities.copyFile, readFileAsync = fileSystemUtilities.readFile, writeFileAsync = fileSystemUtilities.writeFile, readDirectoryAsync = fileSystemUtilities.readDirectory, createDirectoryAsync = fileSystemUtilities.createDirectory;
export function copyFile(sourceFilePath, targetFilePath) {
    var content = null;
    try {
        content = copyFileAsync(sourceFilePath, targetFilePath);
        console.log("Copy file '".concat(sourceFilePath, "' to '").concat(targetFilePath, "'."));
    } catch (error) {
        var message;
        message = UNABLE_TO_COPY_FILE_MESSAGE;
        console.log(message);
        message = error.message;
        console.log(message);
    }
    return content;
}
export function readFile(filePath) {
    var content = null;
    try {
        content = readFileAsync(filePath);
        console.log("Read file '".concat(filePath, "'."));
    } catch (error) {
        var message;
        message = UNABLE_TO_READ_FILE_MESSAGE;
        console.log(message);
        message = error.message;
        console.log(message);
    }
    return content;
}
export function writeFile(filePath, content) {
    try {
        writeFileAsync(filePath, content);
        console.log("Write file '".concat(filePath, "'."));
    } catch (error) {
        var message;
        message = UNABLE_TO_WRITE_FILE_MESSAGE;
        console.log(message);
        message = error.message;
        console.log(message);
    }
}
export function readDirectory(directoryPath, callback) {
    var recursive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    try {
        var entryNames = readDirectoryAsync(directoryPath);
        entryNames.forEach(function(entryName) {
            var entryNameHiddenName = isEntryNameHiddenName(entryName);
            if (!entryNameHiddenName) {
                var entryPath = concatenatePaths(directoryPath, entryName), entryFile = isEntryFile(entryPath);
                if (entryFile) {
                    var filePath = entryPath; ///
                    callback(filePath);
                } else {
                    if (recursive) {
                        var _$directoryPath = entryPath; ///
                        readDirectory(_$directoryPath, callback, recursive);
                    }
                }
            }
        });
    } catch (error) {
        var message;
        message = UNABLE_TO_READ_DIRECTORY_MESSAGE;
        console.log(message);
        message = error.message;
        console.log(message);
    }
}
export function createDirectory(directoryPath) {
    var entryPath = directoryPath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        return;
    }
    try {
        createDirectoryAsync(directoryPath);
        console.log("Create directory '".concat(directoryPath, "'."));
    } catch (error) {
        var message;
        message = UNABLE_TO_CREATE_DIRECTORY_MESSAGE;
        console.log(message);
        message = error.message;
        console.log(message);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgaXNFbnRyeU5hbWVIaWRkZW5OYW1lIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXRoXCI7XG5pbXBvcnQgeyBVTkFCTEVfVE9fQ09QWV9GSUxFX01FU1NBR0UsXG4gICAgICAgIFVOQUJMRV9UT19SRUFEX0ZJTEVfTUVTU0FHRSxcbiAgICAgICAgVU5BQkxFX1RPX1dSSVRFX0ZJTEVfTUVTU0FHRSxcbiAgICAgICAgVU5BQkxFX1RPX1JFQURfRElSRUNUT1JZX01FU1NBR0UsXG4gICAgICAgIFVOQUJMRV9UT19DUkVBVEVfRElSRUNUT1JZX01FU1NBR0UgfSBmcm9tIFwiLi4vbWVzc2FnZXNcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBpc0VudHJ5RmlsZSxcbiAgICAgICAgY2hlY2tFbnRyeUV4aXN0cyxcbiAgICAgICAgY29weUZpbGU6IGNvcHlGaWxlQXN5bmMsXG4gICAgICAgIHJlYWRGaWxlOiByZWFkRmlsZUFzeW5jLFxuICAgICAgICB3cml0ZUZpbGU6IHdyaXRlRmlsZUFzeW5jLFxuICAgICAgICByZWFkRGlyZWN0b3J5OiByZWFkRGlyZWN0b3J5QXN5bmMsXG4gICAgICAgIGNyZWF0ZURpcmVjdG9yeTogY3JlYXRlRGlyZWN0b3J5QXN5bmMgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5RmlsZShzb3VyY2VGaWxlUGF0aCwgdGFyZ2V0RmlsZVBhdGgpIHtcbiAgbGV0IGNvbnRlbnQgPSBudWxsO1xuXG4gIHRyeSB7XG4gICAgY29udGVudCA9IGNvcHlGaWxlQXN5bmMoc291cmNlRmlsZVBhdGgsIHRhcmdldEZpbGVQYXRoKTtcblxuICAgIGNvbnNvbGUubG9nKGBDb3B5IGZpbGUgJyR7c291cmNlRmlsZVBhdGh9JyB0byAnJHt0YXJnZXRGaWxlUGF0aH0nLmApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxldCBtZXNzYWdlO1xuXG4gICAgbWVzc2FnZSA9IFVOQUJMRV9UT19DT1BZX0ZJTEVfTUVTU0FHRTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4gICAgKHsgbWVzc2FnZSB9ID0gZXJyb3IpO1xuXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVQYXRoKSB7XG4gIGxldCBjb250ZW50ID0gbnVsbDtcblxuICB0cnkge1xuICAgIGNvbnRlbnQgPSByZWFkRmlsZUFzeW5jKGZpbGVQYXRoKTtcblxuICAgIGNvbnNvbGUubG9nKGBSZWFkIGZpbGUgJyR7ZmlsZVBhdGh9Jy5gKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsZXQgbWVzc2FnZTtcblxuICAgIG1lc3NhZ2UgPSBVTkFCTEVfVE9fUkVBRF9GSUxFX01FU1NBR0U7XG5cbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuICAgICh7IG1lc3NhZ2UgfSA9IGVycm9yKTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUZpbGUoZmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgdHJ5IHtcbiAgICB3cml0ZUZpbGVBc3luYyhmaWxlUGF0aCwgY29udGVudCk7XG5cbiAgICBjb25zb2xlLmxvZyhgV3JpdGUgZmlsZSAnJHtmaWxlUGF0aH0nLmApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxldCBtZXNzYWdlO1xuXG4gICAgbWVzc2FnZSA9IFVOQUJMRV9UT19XUklURV9GSUxFX01FU1NBR0U7XG5cbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuICAgICh7IG1lc3NhZ2UgfSA9IGVycm9yKTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGgsIGNhbGxiYWNrLCByZWN1cnNpdmUgPSB0cnVlKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW50cnlOYW1lcyA9IHJlYWREaXJlY3RvcnlBc3luYyhkaXJlY3RvcnlQYXRoKTtcblxuICAgIGVudHJ5TmFtZXMuZm9yRWFjaCgoZW50cnlOYW1lKSA9PiB7XG4gICAgICBjb25zdCBlbnRyeU5hbWVIaWRkZW5OYW1lID0gaXNFbnRyeU5hbWVIaWRkZW5OYW1lKGVudHJ5TmFtZSk7XG5cbiAgICAgIGlmICghZW50cnlOYW1lSGlkZGVuTmFtZSkge1xuICAgICAgICBjb25zdCBlbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKGRpcmVjdG9yeVBhdGgsIGVudHJ5TmFtZSksIC8vL1xuICAgICAgICAgICAgICBlbnRyeUZpbGUgPSBpc0VudHJ5RmlsZShlbnRyeVBhdGgpO1xuXG4gICAgICAgIGlmIChlbnRyeUZpbGUpIHtcbiAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGVudHJ5UGF0aDsgLy8vXG5cbiAgICAgICAgICBjYWxsYmFjayhmaWxlUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0b3J5UGF0aCA9IGVudHJ5UGF0aDsgIC8vL1xuXG4gICAgICAgICAgICByZWFkRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGgsIGNhbGxiYWNrLCByZWN1cnNpdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxldCBtZXNzYWdlO1xuXG4gICAgbWVzc2FnZSA9IFVOQUJMRV9UT19SRUFEX0RJUkVDVE9SWV9NRVNTQUdFO1xuXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICAoeyBtZXNzYWdlIH0gPSBlcnJvcik7XG5cbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3QgZW50cnlQYXRoID0gZGlyZWN0b3J5UGF0aCwgIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoZW50cnlQYXRoKTtcblxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNyZWF0ZURpcmVjdG9yeUFzeW5jKGRpcmVjdG9yeVBhdGgpO1xuXG4gICAgY29uc29sZS5sb2coYENyZWF0ZSBkaXJlY3RvcnkgJyR7ZGlyZWN0b3J5UGF0aH0nLmApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxldCBtZXNzYWdlO1xuXG4gICAgbWVzc2FnZSA9IFVOQUJMRV9UT19DUkVBVEVfRElSRUNUT1JZX01FU1NBR0U7XG5cbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuICAgICh7IG1lc3NhZ2UgfSA9IGVycm9yKTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG59XG4iXSwibmFtZXMiOlsicGF0aFV0aWxpdGllcyIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJpc0VudHJ5TmFtZUhpZGRlbk5hbWUiLCJVTkFCTEVfVE9fQ09QWV9GSUxFX01FU1NBR0UiLCJVTkFCTEVfVE9fUkVBRF9GSUxFX01FU1NBR0UiLCJVTkFCTEVfVE9fV1JJVEVfRklMRV9NRVNTQUdFIiwiVU5BQkxFX1RPX1JFQURfRElSRUNUT1JZX01FU1NBR0UiLCJVTkFCTEVfVE9fQ1JFQVRFX0RJUkVDVE9SWV9NRVNTQUdFIiwiY29uY2F0ZW5hdGVQYXRocyIsImlzRW50cnlGaWxlIiwiY2hlY2tFbnRyeUV4aXN0cyIsImNvcHlGaWxlIiwiY29weUZpbGVBc3luYyIsInJlYWRGaWxlIiwicmVhZEZpbGVBc3luYyIsIndyaXRlRmlsZSIsIndyaXRlRmlsZUFzeW5jIiwicmVhZERpcmVjdG9yeSIsInJlYWREaXJlY3RvcnlBc3luYyIsImNyZWF0ZURpcmVjdG9yeSIsImNyZWF0ZURpcmVjdG9yeUFzeW5jIiwic291cmNlRmlsZVBhdGgiLCJ0YXJnZXRGaWxlUGF0aCIsImNvbnRlbnQiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJtZXNzYWdlIiwiZmlsZVBhdGgiLCJkaXJlY3RvcnlQYXRoIiwiY2FsbGJhY2siLCJyZWN1cnNpdmUiLCJlbnRyeU5hbWVzIiwiZm9yRWFjaCIsImVudHJ5TmFtZSIsImVudHJ5TmFtZUhpZGRlbk5hbWUiLCJlbnRyeVBhdGgiLCJlbnRyeUZpbGUiLCJlbnRyeUV4aXN0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxTQUFTQSxhQUFhLEVBQUVDLG1CQUFtQixRQUFRLFlBQVk7QUFFL0QsU0FBU0MscUJBQXFCLFFBQVEsb0JBQW9CO0FBQzFELFNBQVNDLDJCQUEyQixFQUM1QkMsMkJBQTJCLEVBQzNCQyw0QkFBNEIsRUFDNUJDLGdDQUFnQyxFQUNoQ0Msa0NBQWtDLFFBQVEsY0FBYztBQUVoRSxJQUFNLEFBQUVDLG1CQUFxQlIsY0FBckJRLGtCQUNBQyxjQU0wQ1Isb0JBTjFDUSxhQUNBQyxtQkFLMENULG9CQUwxQ1Msa0JBQ0FDLEFBQVVDLGdCQUlnQ1gsb0JBSjFDVSxVQUNBRSxBQUFVQyxnQkFHZ0NiLG9CQUgxQ1ksVUFDQUUsQUFBV0MsaUJBRStCZixvQkFGMUNjLFdBQ0FFLEFBQWVDLHFCQUMyQmpCLG9CQUQxQ2dCLGVBQ0FFLEFBQWlCQyx1QkFBeUJuQixvQkFBMUNrQjtBQUVSLE9BQU8sU0FBU1IsU0FBU1UsY0FBYyxFQUFFQyxjQUFjO0lBQ3JELElBQUlDLFVBQVU7SUFFZCxJQUFJO1FBQ0ZBLFVBQVVYLGNBQWNTLGdCQUFnQkM7UUFFeENFLFFBQVFDLEdBQUcsQ0FBQyxBQUFDLGNBQW9DSCxPQUF2QkQsZ0JBQWUsVUFBdUIsT0FBZkMsZ0JBQWU7SUFDbEUsRUFBRSxPQUFPSSxPQUFPO1FBQ2QsSUFBSUM7UUFFSkEsVUFBVXhCO1FBRVZxQixRQUFRQyxHQUFHLENBQUNFO1FBRVRBLFVBQVlELE1BQVpDO1FBRUhILFFBQVFDLEdBQUcsQ0FBQ0U7SUFDZDtJQUVBLE9BQU9KO0FBQ1Q7QUFFQSxPQUFPLFNBQVNWLFNBQVNlLFFBQVE7SUFDL0IsSUFBSUwsVUFBVTtJQUVkLElBQUk7UUFDRkEsVUFBVVQsY0FBY2M7UUFFeEJKLFFBQVFDLEdBQUcsQ0FBQyxBQUFDLGNBQXNCLE9BQVRHLFVBQVM7SUFDckMsRUFBRSxPQUFPRixPQUFPO1FBQ2QsSUFBSUM7UUFFSkEsVUFBVXZCO1FBRVZvQixRQUFRQyxHQUFHLENBQUNFO1FBRVRBLFVBQVlELE1BQVpDO1FBRUhILFFBQVFDLEdBQUcsQ0FBQ0U7SUFDZDtJQUVBLE9BQU9KO0FBQ1Q7QUFFQSxPQUFPLFNBQVNSLFVBQVVhLFFBQVEsRUFBRUwsT0FBTztJQUN6QyxJQUFJO1FBQ0ZQLGVBQWVZLFVBQVVMO1FBRXpCQyxRQUFRQyxHQUFHLENBQUMsQUFBQyxlQUF1QixPQUFURyxVQUFTO0lBQ3RDLEVBQUUsT0FBT0YsT0FBTztRQUNkLElBQUlDO1FBRUpBLFVBQVV0QjtRQUVWbUIsUUFBUUMsR0FBRyxDQUFDRTtRQUVUQSxVQUFZRCxNQUFaQztRQUVISCxRQUFRQyxHQUFHLENBQUNFO0lBQ2Q7QUFDRjtBQUVBLE9BQU8sU0FBU1YsY0FBY1ksYUFBYSxFQUFFQyxRQUFRO1FBQUVDLFlBQUFBLGlFQUFZO0lBQ2pFLElBQUk7UUFDRixJQUFNQyxhQUFhZCxtQkFBbUJXO1FBRXRDRyxXQUFXQyxPQUFPLENBQUMsU0FBQ0M7WUFDbEIsSUFBTUMsc0JBQXNCakMsc0JBQXNCZ0M7WUFFbEQsSUFBSSxDQUFDQyxxQkFBcUI7Z0JBQ3hCLElBQU1DLFlBQVk1QixpQkFBaUJxQixlQUFlSyxZQUM1Q0csWUFBWTVCLFlBQVkyQjtnQkFFOUIsSUFBSUMsV0FBVztvQkFDYixJQUFNVCxXQUFXUSxXQUFXLEdBQUc7b0JBRS9CTixTQUFTRjtnQkFDWCxPQUFPO29CQUNMLElBQUlHLFdBQVc7d0JBQ2IsSUFBTUYsa0JBQWdCTyxXQUFZLEdBQUc7d0JBRXJDbkIsY0FBY1ksaUJBQWVDLFVBQVVDO29CQUN6QztnQkFDRjtZQUNGO1FBQ0Y7SUFDRixFQUFFLE9BQU9MLE9BQU87UUFDZCxJQUFJQztRQUVKQSxVQUFVckI7UUFFVmtCLFFBQVFDLEdBQUcsQ0FBQ0U7UUFFVEEsVUFBWUQsTUFBWkM7UUFFSEgsUUFBUUMsR0FBRyxDQUFDRTtJQUNkO0FBQ0Y7QUFFQSxPQUFPLFNBQVNSLGdCQUFnQlUsYUFBYTtJQUMzQyxJQUFNTyxZQUFZUCxlQUNaUyxjQUFjNUIsaUJBQWlCMEI7SUFFckMsSUFBSUUsYUFBYTtRQUNmO0lBQ0Y7SUFFQSxJQUFJO1FBQ0ZsQixxQkFBcUJTO1FBRXJCTCxRQUFRQyxHQUFHLENBQUMsQUFBQyxxQkFBa0MsT0FBZEksZUFBYztJQUNqRCxFQUFFLE9BQU9ILE9BQU87UUFDZCxJQUFJQztRQUVKQSxVQUFVcEI7UUFFVmlCLFFBQVFDLEdBQUcsQ0FBQ0U7UUFFVEEsVUFBWUQsTUFBWkM7UUFFSEgsUUFBUUMsR0FBRyxDQUFDRTtJQUNkO0FBQ0YifQ==