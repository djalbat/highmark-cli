"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _fullScreen = require("../utilities/fullScreen");
var _eventTypes = require("../eventTypes");
var _customEventTypes = require("../customEventTypes");
function enableFullScreen() {
    this.onFullscreenchange(this.fullscreenchangeHandler);
}
function disableFullScreen() {
    this.offFullscreenchange(this.fullscreenchangeHandler);
}
function exitFullScreen() {
    document.exitFullscreen();
}
function requestFullScreen(callback) {
    var domElement = this.getDOMElement();
    domElement.requestFullscreen().then(callback).catch(function(error) {
        alert(error);
    });
}
function onFullscreenchange(fullscreenchangeHandler) {
    var eventType = _eventTypes.FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.onEvent(eventType, handler);
}
function offFullscreenchange(fullscreenchangeHandler) {
    var eventType = _eventTypes.FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.offEvent(eventType, handler);
}
function fullscreenchangeHandler(event, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE;
    this.callCustomHandlers(customEventType, event, element);
}
function onCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
var fullScreenMixins = {
    enableFullScreen: enableFullScreen,
    disableFullScreen: disableFullScreen,
    isFullScreen: _fullScreen.isFullScreen,
    exitFullScreen: exitFullScreen,
    requestFullScreen: requestFullScreen,
    onFullscreenchange: onFullscreenchange,
    offFullscreenchange: offFullscreenchange,
    fullscreenchangeHandler: fullscreenchangeHandler,
    onCustomFullScreenChange: onCustomFullScreenChange,
    offCustomFullScreenChange: offCustomFullScreenChange
};
var _default = fullScreenMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZnVsbHNyZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc0Z1bGxTY3JlZW4gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2Z1bGxTY3JlZW5cIjtcbmltcG9ydCB7IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSB9IGZyb20gXCIuLi9ldmVudFR5cGVzXCI7XG5pbXBvcnQgeyBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vY3VzdG9tRXZlbnRUeXBlc1wiO1xuXG5mdW5jdGlvbiBlbmFibGVGdWxsU2NyZWVuKCkge1xuICB0aGlzLm9uRnVsbHNjcmVlbmNoYW5nZSh0aGlzLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZUZ1bGxTY3JlZW4oKSB7XG4gIHRoaXMub2ZmRnVsbHNjcmVlbmNoYW5nZSh0aGlzLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZXhpdEZ1bGxTY3JlZW4oKSB7XG4gIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RGdWxsU2NyZWVuKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSB0aGlzLmdldERPTUVsZW1lbnQoKTtcblxuICBkb21FbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKClcbiAgICAudGhlbihjYWxsYmFjaylcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBhbGVydChlcnJvcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRnVsbHNjcmVlbmNoYW5nZShmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcikge1xuICBjb25zdCBldmVudFR5cGUgPSBGVUxMU0NSRUVOQ0hBTkdFX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMub25FdmVudChldmVudFR5cGUsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvZmZGdWxsc2NyZWVuY2hhbmdlKGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5vZmZFdmVudChldmVudFR5cGUsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcihldmVudCwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEU7XG5cbiAgdGhpcy5jYWxsQ3VzdG9tSGFuZGxlcnMoY3VzdG9tRXZlbnRUeXBlLCBldmVudCwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9uQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZShmdWxsU2NyZWVuQ2hhbmdlQ3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUsXG4gICAgICAgIGN1c3RvbUhhbmRsZXIgPSBmdWxsU2NyZWVuQ2hhbmdlQ3VzdG9tSGFuZGxlcjsgLy8vXG5cbiAgdGhpcy5vbkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UoZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgY3VzdG9tRXZlbnRUeXBlID0gRlVMTF9TQ1JFRU5fQ0hBTkdFX0NVU1RPTV9FVkVOVF9UWVBFLFxuICAgICAgICBjdXN0b21IYW5kbGVyID0gZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXI7IC8vL1xuXG4gIHRoaXMub2ZmQ3VzdG9tRXZlbnQoY3VzdG9tRXZlbnRUeXBlLCBjdXN0b21IYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuY29uc3QgZnVsbFNjcmVlbk1peGlucyA9IHtcbiAgZW5hYmxlRnVsbFNjcmVlbixcbiAgZGlzYWJsZUZ1bGxTY3JlZW4sXG4gIGlzRnVsbFNjcmVlbixcbiAgZXhpdEZ1bGxTY3JlZW4sXG4gIHJlcXVlc3RGdWxsU2NyZWVuLFxuICBvbkZ1bGxzY3JlZW5jaGFuZ2UsXG4gIG9mZkZ1bGxzY3JlZW5jaGFuZ2UsXG4gIGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyLFxuICBvbkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UsXG4gIG9mZkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2Vcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bGxTY3JlZW5NaXhpbnM7XG4iXSwibmFtZXMiOlsiZW5hYmxlRnVsbFNjcmVlbiIsIm9uRnVsbHNjcmVlbmNoYW5nZSIsImZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyIiwiZGlzYWJsZUZ1bGxTY3JlZW4iLCJvZmZGdWxsc2NyZWVuY2hhbmdlIiwiZXhpdEZ1bGxTY3JlZW4iLCJkb2N1bWVudCIsImV4aXRGdWxsc2NyZWVuIiwicmVxdWVzdEZ1bGxTY3JlZW4iLCJjYWxsYmFjayIsImRvbUVsZW1lbnQiLCJnZXRET01FbGVtZW50IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJ0aGVuIiwiY2F0Y2giLCJlcnJvciIsImFsZXJ0IiwiZXZlbnRUeXBlIiwiRlVMTFNDUkVFTkNIQU5HRV9FVkVOVF9UWVBFIiwiaGFuZGxlciIsIm9uRXZlbnQiLCJvZmZFdmVudCIsImV2ZW50IiwiZWxlbWVudCIsImN1c3RvbUV2ZW50VHlwZSIsIkZVTExfU0NSRUVOX0NIQU5HRV9DVVNUT01fRVZFTlRfVFlQRSIsImNhbGxDdXN0b21IYW5kbGVycyIsIm9uQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZSIsImZ1bGxTY3JlZW5DaGFuZ2VDdXN0b21IYW5kbGVyIiwiY3VzdG9tSGFuZGxlciIsIm9uQ3VzdG9tRXZlbnQiLCJvZmZDdXN0b21GdWxsU2NyZWVuQ2hhbmdlIiwib2ZmQ3VzdG9tRXZlbnQiLCJmdWxsU2NyZWVuTWl4aW5zIiwiaXNGdWxsU2NyZWVuIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBMkVBOzs7ZUFBQTs7OzBCQXpFNkI7MEJBQ2U7Z0NBQ1M7QUFFckQsU0FBU0E7SUFDUCxJQUFJLENBQUNDLGtCQUFrQixDQUFDLElBQUksQ0FBQ0MsdUJBQXVCO0FBQ3REO0FBRUEsU0FBU0M7SUFDUCxJQUFJLENBQUNDLG1CQUFtQixDQUFDLElBQUksQ0FBQ0YsdUJBQXVCO0FBQ3ZEO0FBRUEsU0FBU0c7SUFDUEMsU0FBU0MsY0FBYztBQUN6QjtBQUVBLFNBQVNDLGtCQUFrQkMsUUFBUTtJQUNqQyxJQUFNQyxhQUFhLElBQUksQ0FBQ0MsYUFBYTtJQUVyQ0QsV0FBV0UsaUJBQWlCLEdBQ3pCQyxJQUFJLENBQUNKLFVBQ0xLLEtBQUssQ0FBQyxTQUFDQztRQUNOQyxNQUFNRDtJQUNSO0FBQ0o7QUFFQSxTQUFTZCxtQkFBbUJDLHVCQUF1QjtJQUNqRCxJQUFNZSxZQUFZQyx1Q0FBMkIsRUFDdkNDLFVBQVVqQix5QkFBMEIsR0FBRztJQUU3QyxJQUFJLENBQUNrQixPQUFPLENBQUNILFdBQVdFO0FBQzFCO0FBRUEsU0FBU2Ysb0JBQW9CRix1QkFBdUI7SUFDbEQsSUFBTWUsWUFBWUMsdUNBQTJCLEVBQ3ZDQyxVQUFVakIseUJBQTBCLEdBQUc7SUFFN0MsSUFBSSxDQUFDbUIsUUFBUSxDQUFDSixXQUFXRTtBQUMzQjtBQUVBLFNBQVNqQix3QkFBd0JvQixLQUFLLEVBQUVDLE9BQU87SUFDN0MsSUFBTUMsa0JBQWtCQyxzREFBb0M7SUFFNUQsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0YsaUJBQWlCRixPQUFPQztBQUNsRDtBQUVBLFNBQVNJLHlCQUF5QkMsNkJBQTZCLEVBQUVMLE9BQU87SUFDdEUsSUFBTUMsa0JBQWtCQyxzREFBb0MsRUFDdERJLGdCQUFnQkQsK0JBQStCLEdBQUc7SUFFeEQsSUFBSSxDQUFDRSxhQUFhLENBQUNOLGlCQUFpQkssZUFBZU47QUFDckQ7QUFFQSxTQUFTUSwwQkFBMEJILDZCQUE2QixFQUFFTCxPQUFPO0lBQ3ZFLElBQU1DLGtCQUFrQkMsc0RBQW9DLEVBQ3RESSxnQkFBZ0JELCtCQUErQixHQUFHO0lBRXhELElBQUksQ0FBQ0ksY0FBYyxDQUFDUixpQkFBaUJLLGVBQWVOO0FBQ3REO0FBRUEsSUFBTVUsbUJBQW1CO0lBQ3ZCakMsa0JBQUFBO0lBQ0FHLG1CQUFBQTtJQUNBK0IsY0FBQUEsd0JBQVk7SUFDWjdCLGdCQUFBQTtJQUNBRyxtQkFBQUE7SUFDQVAsb0JBQUFBO0lBQ0FHLHFCQUFBQTtJQUNBRix5QkFBQUE7SUFDQXlCLDBCQUFBQTtJQUNBSSwyQkFBQUE7QUFDRjtJQUVBLFdBQWVFIn0=