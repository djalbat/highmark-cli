"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _easy = require("easy");
var _fullScreen = require("../utilities/fullScreen");
var _customEventTypes = require("../customEventTypes");
var FULLSCREENCHANGE_EVENT_TYPE = _easy.eventTypes.FULLSCREENCHANGE_EVENT_TYPE;
function enableFullScreen() {
    this.onFullscreenchange(this.fullscreenchangeHandler);
}
function disableFullScreen() {
    this.offFullscreenchange(this.fullscreenchangeHandler);
}
function exitFullScreen() {
    document.exitFullscreen();
}
function requestFullScreen() {
    var domElement = this.getDOMElement();
    domElement.requestFullscreen().catch(alert);
}
function onFullscreenchange(fullscreenchangeHandler) {
    var eventType = FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.onEvent(eventType, handler);
}
function offFullscreenchange(fullscreenchangeHandler) {
    var eventType = FULLSCREENCHANGE_EVENT_TYPE, handler = fullscreenchangeHandler; ///
    this.offEvent(eventType, handler);
}
function fullscreenchangeHandler(event, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE;
    this.callCustomHandlers(customEventType, event, element);
}
function onCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomFullScreenChange(fullScreenChangeCustomHandler, element) {
    var customEventType = _customEventTypes.FULL_SCREEN_CHANGE_CUSTOM_EVENT_TYPE, customHandler = fullScreenChangeCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
var fullScreenMixins = {
    enableFullScreen: enableFullScreen,
    disableFullScreen: disableFullScreen,
    isFullScreen: _fullScreen.isFullScreen,
    exitFullScreen: exitFullScreen,
    requestFullScreen: requestFullScreen,
    onFullscreenchange: onFullscreenchange,
    offFullscreenchange: offFullscreenchange,
    fullscreenchangeHandler: fullscreenchangeHandler,
    onCustomFullScreenChange: onCustomFullScreenChange,
    offCustomFullScreenChange: offCustomFullScreenChange
};
var _default = fullScreenMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZnVsbHNyZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBldmVudFR5cGVzIH0gZnJvbSBcImVhc3lcIjtcblxuaW1wb3J0IHsgaXNGdWxsU2NyZWVuIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9mdWxsU2NyZWVuXCI7XG5pbXBvcnQgeyBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vY3VzdG9tRXZlbnRUeXBlc1wiO1xuXG5jb25zdCB7IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSB9ID0gZXZlbnRUeXBlcztcblxuZnVuY3Rpb24gZW5hYmxlRnVsbFNjcmVlbigpIHtcbiAgdGhpcy5vbkZ1bGxzY3JlZW5jaGFuZ2UodGhpcy5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVGdWxsU2NyZWVuKCkge1xuICB0aGlzLm9mZkZ1bGxzY3JlZW5jaGFuZ2UodGhpcy5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIGV4aXRGdWxsU2NyZWVuKCkge1xuICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0RnVsbFNjcmVlbigpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IHRoaXMuZ2V0RE9NRWxlbWVudCgpO1xuXG4gIGRvbUVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKVxuICAgIC5jYXRjaChhbGVydCk7XG59XG5cbmZ1bmN0aW9uIG9uRnVsbHNjcmVlbmNoYW5nZShmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcikge1xuICBjb25zdCBldmVudFR5cGUgPSBGVUxMU0NSRUVOQ0hBTkdFX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMub25FdmVudChldmVudFR5cGUsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBvZmZGdWxsc2NyZWVuY2hhbmdlKGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IEZVTExTQ1JFRU5DSEFOR0VfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5vZmZFdmVudChldmVudFR5cGUsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBmdWxsc2NyZWVuY2hhbmdlSGFuZGxlcihldmVudCwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEU7XG5cbiAgdGhpcy5jYWxsQ3VzdG9tSGFuZGxlcnMoY3VzdG9tRXZlbnRUeXBlLCBldmVudCwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9uQ3VzdG9tRnVsbFNjcmVlbkNoYW5nZShmdWxsU2NyZWVuQ2hhbmdlQ3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBGVUxMX1NDUkVFTl9DSEFOR0VfQ1VTVE9NX0VWRU5UX1RZUEUsXG4gICAgICAgIGN1c3RvbUhhbmRsZXIgPSBmdWxsU2NyZWVuQ2hhbmdlQ3VzdG9tSGFuZGxlcjsgLy8vXG5cbiAgdGhpcy5vbkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UoZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgY3VzdG9tRXZlbnRUeXBlID0gRlVMTF9TQ1JFRU5fQ0hBTkdFX0NVU1RPTV9FVkVOVF9UWVBFLFxuICAgICAgICBjdXN0b21IYW5kbGVyID0gZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXI7IC8vL1xuXG4gIHRoaXMub2ZmQ3VzdG9tRXZlbnQoY3VzdG9tRXZlbnRUeXBlLCBjdXN0b21IYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuY29uc3QgZnVsbFNjcmVlbk1peGlucyA9IHtcbiAgZW5hYmxlRnVsbFNjcmVlbixcbiAgZGlzYWJsZUZ1bGxTY3JlZW4sXG4gIGlzRnVsbFNjcmVlbixcbiAgZXhpdEZ1bGxTY3JlZW4sXG4gIHJlcXVlc3RGdWxsU2NyZWVuLFxuICBvbkZ1bGxzY3JlZW5jaGFuZ2UsXG4gIG9mZkZ1bGxzY3JlZW5jaGFuZ2UsXG4gIGZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyLFxuICBvbkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UsXG4gIG9mZkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2Vcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bGxTY3JlZW5NaXhpbnM7XG4iXSwibmFtZXMiOlsiRlVMTFNDUkVFTkNIQU5HRV9FVkVOVF9UWVBFIiwiZXZlbnRUeXBlcyIsImVuYWJsZUZ1bGxTY3JlZW4iLCJvbkZ1bGxzY3JlZW5jaGFuZ2UiLCJmdWxsc2NyZWVuY2hhbmdlSGFuZGxlciIsImRpc2FibGVGdWxsU2NyZWVuIiwib2ZmRnVsbHNjcmVlbmNoYW5nZSIsImV4aXRGdWxsU2NyZWVuIiwiZG9jdW1lbnQiLCJleGl0RnVsbHNjcmVlbiIsInJlcXVlc3RGdWxsU2NyZWVuIiwiZG9tRWxlbWVudCIsImdldERPTUVsZW1lbnQiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsImNhdGNoIiwiYWxlcnQiLCJldmVudFR5cGUiLCJoYW5kbGVyIiwib25FdmVudCIsIm9mZkV2ZW50IiwiZXZlbnQiLCJlbGVtZW50IiwiY3VzdG9tRXZlbnRUeXBlIiwiRlVMTF9TQ1JFRU5fQ0hBTkdFX0NVU1RPTV9FVkVOVF9UWVBFIiwiY2FsbEN1c3RvbUhhbmRsZXJzIiwib25DdXN0b21GdWxsU2NyZWVuQ2hhbmdlIiwiZnVsbFNjcmVlbkNoYW5nZUN1c3RvbUhhbmRsZXIiLCJjdXN0b21IYW5kbGVyIiwib25DdXN0b21FdmVudCIsIm9mZkN1c3RvbUZ1bGxTY3JlZW5DaGFuZ2UiLCJvZmZDdXN0b21FdmVudCIsImZ1bGxTY3JlZW5NaXhpbnMiLCJpc0Z1bGxTY3JlZW4iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OytCQTJFQTs7O2VBQUE7OztvQkF6RTJCOzBCQUVFO2dDQUN3QjtBQUVyRCxJQUFNLEFBQUVBLDhCQUFnQ0MsZ0JBQVUsQ0FBMUNEO0FBRVIsU0FBU0U7SUFDUCxJQUFJLENBQUNDLGtCQUFrQixDQUFDLElBQUksQ0FBQ0MsdUJBQXVCO0FBQ3REO0FBRUEsU0FBU0M7SUFDUCxJQUFJLENBQUNDLG1CQUFtQixDQUFDLElBQUksQ0FBQ0YsdUJBQXVCO0FBQ3ZEO0FBRUEsU0FBU0c7SUFDUEMsU0FBU0MsY0FBYztBQUN6QjtBQUVBLFNBQVNDO0lBQ1AsSUFBTUMsYUFBYSxJQUFJLENBQUNDLGFBQWE7SUFFckNELFdBQVdFLGlCQUFpQixHQUN6QkMsS0FBSyxDQUFDQztBQUNYO0FBRUEsU0FBU1osbUJBQW1CQyx1QkFBdUI7SUFDakQsSUFBTVksWUFBWWhCLDZCQUNaaUIsVUFBVWIseUJBQTBCLEdBQUc7SUFFN0MsSUFBSSxDQUFDYyxPQUFPLENBQUNGLFdBQVdDO0FBQzFCO0FBRUEsU0FBU1gsb0JBQW9CRix1QkFBdUI7SUFDbEQsSUFBTVksWUFBWWhCLDZCQUNaaUIsVUFBVWIseUJBQTBCLEdBQUc7SUFFN0MsSUFBSSxDQUFDZSxRQUFRLENBQUNILFdBQVdDO0FBQzNCO0FBRUEsU0FBU2Isd0JBQXdCZ0IsS0FBSyxFQUFFQyxPQUFPO0lBQzdDLElBQU1DLGtCQUFrQkMsc0RBQW9DO0lBRTVELElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGLGlCQUFpQkYsT0FBT0M7QUFDbEQ7QUFFQSxTQUFTSSx5QkFBeUJDLDZCQUE2QixFQUFFTCxPQUFPO0lBQ3RFLElBQU1DLGtCQUFrQkMsc0RBQW9DLEVBQ3RESSxnQkFBZ0JELCtCQUErQixHQUFHO0lBRXhELElBQUksQ0FBQ0UsYUFBYSxDQUFDTixpQkFBaUJLLGVBQWVOO0FBQ3JEO0FBRUEsU0FBU1EsMEJBQTBCSCw2QkFBNkIsRUFBRUwsT0FBTztJQUN2RSxJQUFNQyxrQkFBa0JDLHNEQUFvQyxFQUN0REksZ0JBQWdCRCwrQkFBK0IsR0FBRztJQUV4RCxJQUFJLENBQUNJLGNBQWMsQ0FBQ1IsaUJBQWlCSyxlQUFlTjtBQUN0RDtBQUVBLElBQU1VLG1CQUFtQjtJQUN2QjdCLGtCQUFBQTtJQUNBRyxtQkFBQUE7SUFDQTJCLGNBQUFBLHdCQUFZO0lBQ1p6QixnQkFBQUE7SUFDQUcsbUJBQUFBO0lBQ0FQLG9CQUFBQTtJQUNBRyxxQkFBQUE7SUFDQUYseUJBQUFBO0lBQ0FxQiwwQkFBQUE7SUFDQUksMkJBQUFBO0FBQ0Y7SUFFQSxXQUFlRSJ9