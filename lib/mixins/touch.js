"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _easy = require("easy");
var _position = /*#__PURE__*/ _interop_require_default(require("../position"));
var _relative = /*#__PURE__*/ _interop_require_default(require("../position/relative"));
var _constants = require("../constants");
var _customEventTypes = require("../customEventTypes");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function enableTouch() {
    var startPosition = null;
    this.updateState({
        startPosition: startPosition
    });
    this.onMouseDown(this.mouseDownHandler);
    this.onMouseMove(this.mouseMoveHandler);
    _easy.window.onMouseUp(this.mouseUpHandler, this);
    this.onTouchStart(this.touchStartHandler);
    this.onTouchMove(this.touchMoveHandler);
    this.onTouchEnd(this.touchEndHandler);
}
function disableTouch() {
    this.offMouseDown(this.mouseDownHandler);
    this.offMouseMove(this.mouseMoveHandler);
    _easy.window.offMouseUp(this.mouseUpHandler, this);
    this.offTouchStart(this.touchStartHandler);
    this.offTouchMove(this.touchMoveHandler);
    this.offTouchEnd(this.touchEndHandler);
}
function onCustomTap(tapCustomHandler, element) {
    var customEventType = _customEventTypes.TAP_CUSTOM_EVENT_TYPE, customHandler = tapCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomTap(tapCustomHandler, element) {
    var customEventType = _customEventTypes.TAP_CUSTOM_EVENT_TYPE, customHandler = tapCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomDrag(dragCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_CUSTOM_EVENT_TYPE, customHandler = dragCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomDrag(dragCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_CUSTOM_EVENT_TYPE, customHandler = dragCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomPinch(pinchCustomHandler, element) {
    var customEventType = _customEventTypes.PINCH_CUSTOM_EVENT_TYPE, customHandler = pinchCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomPinch(pinchCustomHandler, element) {
    var customEventType = _customEventTypes.PINCH_CUSTOM_EVENT_TYPE, customHandler = pinchCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomSwipeUp(swipeUpCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_UP_CUSTOM_EVENT_TYPE, customHandler = swipeUpCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomSwipeUp(swipeUpCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_UP_CUSTOM_EVENT_TYPE, customHandler = swipeUpCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomSwipeDown(swipeDownCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_DOWN_CUSTOM_EVENT_TYPE, customHandler = swipeDownCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomSwipeDown(swipeDownCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_DOWN_CUSTOM_EVENT_TYPE, customHandler = swipeDownCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomSwipeLeft(swipeLeftCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_LEFT_CUSTOM_EVENT_TYPE, customHandler = swipeLeftCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomSwipeLeft(swipeLeftCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_LEFT_CUSTOM_EVENT_TYPE, customHandler = swipeLeftCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomSwipeRight(swipeRightCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_RIGHT_CUSTOM_EVENT_TYPE, customHandler = swipeRightCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomSwipeRight(swipeRightCustomHandler, element) {
    var customEventType = _customEventTypes.SWIPE_RIGHT_CUSTOM_EVENT_TYPE, customHandler = swipeRightCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function getStartPosition() {
    var startPosition = this.getState().startPosition;
    return startPosition;
}
function setStartPosition(startPosition) {
    this.updateState({
        startPosition: startPosition
    });
}
function touchStartHandler(event, element) {
    this.startHandler(event, element, function(event) {
        var touchEvent = event, position = _position.default.fromTouchEvent(touchEvent);
        return position;
    });
}
function mouseDownHandler(event, element) {
    this.startHandler(event, element, function(event) {
        var mouseEvent = event, position = _position.default.fromMouseEvent(mouseEvent);
        return position;
    });
}
function touchMoveHandler(event, element) {
    this.moveHandler(event, element, function(event) {
        var touchEvent = event, position = _position.default.fromTouchEvent(touchEvent);
        return position;
    });
}
function mouseMoveHandler(event, element) {
    this.moveHandler(event, element, function(event) {
        var mouseEvent = event, position = _position.default.fromMouseEvent(mouseEvent);
        return position;
    });
}
function touchEndHandler(event, element) {
    this.endHandler(event, element, function(event) {
        var touchEvent = event, position = _position.default.fromTouchEvent(touchEvent);
        return position;
    });
}
function mouseUpHandler(event, element) {
    this.endHandler(event, element, function(event) {
        var mouseEvent = event, position = _position.default.fromMouseEvent(mouseEvent);
        return position;
    });
}
function startHandler(event, element, positionFromEvent) {
    var position = positionFromEvent(event), startPosition = position; ///
    this.setStartPosition(startPosition);
}
function moveHandler(event, element, positionFromEvent) {
    var startPosition = this.getStartPosition();
    if (startPosition !== null) {
        var position = positionFromEvent(event);
        if (position !== null) {
            var positionMatchesStartPosition = position.match(startPosition);
            if (positionMatchesStartPosition) {
                var relativePosition = _relative.default.fromPositionAndStartPosition(position, startPosition), top = relativePosition.getTop(), left = relativePosition.getLeft(), customEventType = _customEventTypes.DRAG_CUSTOM_EVENT_TYPE;
                this.callCustomHandlers(customEventType, event, element, top, left);
            }
        }
    }
}
function endHandler(event, element, positionFromEvent) {
    var startPosition;
    startPosition = this.getStartPosition();
    if (startPosition !== null) {
        var position = positionFromEvent(event);
        if (position !== null) {
            var positionMatchesStartPosition = position.match(startPosition);
            if (positionMatchesStartPosition) {
                var relativePosition = _relative.default.fromPositionAndStartPosition(position, startPosition), direction = relativePosition.getDirection(), speed = relativePosition.getSpeed(), time = relativePosition.getTime();
                var customEventType = null, projectedVelocity;
                if (speed === 0) {
                    if (time < _constants.MAXIMUM_TAP_TIME) {
                        customEventType = _customEventTypes.TAP_CUSTOM_EVENT_TYPE;
                        projectedVelocity = speed; ///
                    }
                } else if (speed > _constants.MINIMUM_SWIPE_SPEED) {
                    if (Math.abs(direction) < _constants.MAXIMUM_SWIPE_RANGE) {
                        customEventType = _customEventTypes.SWIPE_RIGHT_CUSTOM_EVENT_TYPE;
                        projectedVelocity = speed * Math.cos(direction);
                    }
                    if (Math.abs(_constants.PI_OVER_TWO - direction) < _constants.MAXIMUM_SWIPE_RANGE) {
                        customEventType = _customEventTypes.SWIPE_UP_CUSTOM_EVENT_TYPE;
                        projectedVelocity = speed * Math.sin(direction);
                    }
                    if (Math.abs(-_constants.PI_OVER_TWO - direction) < _constants.MAXIMUM_SWIPE_RANGE) {
                        customEventType = _customEventTypes.SWIPE_DOWN_CUSTOM_EVENT_TYPE;
                        projectedVelocity = speed * Math.sin(direction);
                    }
                    if (_constants.PI - Math.abs(direction) < _constants.MAXIMUM_SWIPE_RANGE) {
                        customEventType = _customEventTypes.SWIPE_LEFT_CUSTOM_EVENT_TYPE;
                        projectedVelocity = speed * Math.cos(direction);
                    }
                }
                if (customEventType !== null) {
                    this.callCustomHandlers(customEventType, event, element, projectedVelocity);
                }
            }
        }
    }
    startPosition = null;
    this.setStartPosition(startPosition);
}
var touchMixins = {
    enableTouch: enableTouch,
    disableTouch: disableTouch,
    onCustomTap: onCustomTap,
    offCustomTap: offCustomTap,
    onCustomDrag: onCustomDrag,
    offCustomDrag: offCustomDrag,
    onCustomPinch: onCustomPinch,
    offCustomPinch: offCustomPinch,
    onCustomSwipeUp: onCustomSwipeUp,
    offCustomSwipeUp: offCustomSwipeUp,
    onCustomSwipeDown: onCustomSwipeDown,
    offCustomSwipeDown: offCustomSwipeDown,
    onCustomSwipeLeft: onCustomSwipeLeft,
    offCustomSwipeLeft: offCustomSwipeLeft,
    onCustomSwipeRight: onCustomSwipeRight,
    offCustomSwipeRight: offCustomSwipeRight,
    getStartPosition: getStartPosition,
    setStartPosition: setStartPosition,
    touchStartHandler: touchStartHandler,
    mouseDownHandler: mouseDownHandler,
    touchMoveHandler: touchMoveHandler,
    mouseMoveHandler: mouseMoveHandler,
    touchEndHandler: touchEndHandler,
    mouseUpHandler: mouseUpHandler,
    startHandler: startHandler,
    moveHandler: moveHandler,
    endHandler: endHandler
};
var _default = touchMixins;

//# sourceMappingURL=data:application/json;base64,