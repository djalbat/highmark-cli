"use strict";
import { MarkdownLexer, MarkdownParser } from "highmark-markdown";
import { UNABLE_TO_PARSE_MARKDOWN_FILE_MESSAGE } from "../messages";
var markdownLexer = MarkdownLexer.fromNothing(), markdownParser = MarkdownParser.fromNothing();
export function tokensFromContent(content) {
    var tokens = markdownLexer.tokenise(content);
    return tokens;
}
export function nodeFromTokens(tokens) {
    var startRuleName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var ruleMap = markdownParser.getRuleMap(), startRule = startRuleName !== null ? ruleMap[startRuleName] : markdownParser.getStartRule(), startOfContent = true, node = markdownParser.parse(tokens, startRule, startOfContent);
    if (node === null) {
        var message = UNABLE_TO_PARSE_MARKDOWN_FILE_MESSAGE;
        console.log(message);
    }
    return node;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWFya2Rvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE1hcmtkb3duTGV4ZXIsIE1hcmtkb3duUGFyc2VyIH0gZnJvbSBcImhpZ2htYXJrLW1hcmtkb3duXCI7XG5cbmltcG9ydCB7IFVOQUJMRV9UT19QQVJTRV9NQVJLRE9XTl9GSUxFX01FU1NBR0UgfSBmcm9tIFwiLi4vbWVzc2FnZXNcIjtcblxuY29uc3QgbWFya2Rvd25MZXhlciA9IE1hcmtkb3duTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIG1hcmtkb3duUGFyc2VyID0gTWFya2Rvd25QYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQpIHtcbiAgY29uc3QgdG9rZW5zID0gbWFya2Rvd25MZXhlci50b2tlbmlzZShjb250ZW50KTtcblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9kZUZyb21Ub2tlbnModG9rZW5zLCBzdGFydFJ1bGVOYW1lID0gbnVsbCkge1xuICBjb25zdCBydWxlTWFwID0gbWFya2Rvd25QYXJzZXIuZ2V0UnVsZU1hcCgpLFxuICAgICAgICBzdGFydFJ1bGUgPSAoc3RhcnRSdWxlTmFtZSAhPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgIHJ1bGVNYXBbc3RhcnRSdWxlTmFtZV0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25QYXJzZXIuZ2V0U3RhcnRSdWxlKCksXG4gICAgICAgIHN0YXJ0T2ZDb250ZW50ID0gdHJ1ZSxcbiAgICAgICAgbm9kZSA9IG1hcmtkb3duUGFyc2VyLnBhcnNlKHRva2Vucywgc3RhcnRSdWxlLCBzdGFydE9mQ29udGVudCk7XG5cbiAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gVU5BQkxFX1RPX1BBUlNFX01BUktET1dOX0ZJTEVfTUVTU0FHRTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iXSwibmFtZXMiOlsiTWFya2Rvd25MZXhlciIsIk1hcmtkb3duUGFyc2VyIiwiVU5BQkxFX1RPX1BBUlNFX01BUktET1dOX0ZJTEVfTUVTU0FHRSIsIm1hcmtkb3duTGV4ZXIiLCJmcm9tTm90aGluZyIsIm1hcmtkb3duUGFyc2VyIiwidG9rZW5zRnJvbUNvbnRlbnQiLCJjb250ZW50IiwidG9rZW5zIiwidG9rZW5pc2UiLCJub2RlRnJvbVRva2VucyIsInN0YXJ0UnVsZU5hbWUiLCJydWxlTWFwIiwiZ2V0UnVsZU1hcCIsInN0YXJ0UnVsZSIsImdldFN0YXJ0UnVsZSIsInN0YXJ0T2ZDb250ZW50Iiwibm9kZSIsInBhcnNlIiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsYUFBYSxFQUFFQyxjQUFjLFFBQVEsb0JBQW9CO0FBRWxFLFNBQVNDLHFDQUFxQyxRQUFRLGNBQWM7QUFFcEUsSUFBTUMsZ0JBQWdCSCxjQUFjSSxXQUFXLElBQ3pDQyxpQkFBaUJKLGVBQWVHLFdBQVc7QUFFakQsT0FBTyxTQUFTRSxrQkFBa0JDLE9BQU87SUFDdkMsSUFBTUMsU0FBU0wsY0FBY00sUUFBUSxDQUFDRjtJQUV0QyxPQUFPQztBQUNUO0FBRUEsT0FBTyxTQUFTRSxlQUFlRixNQUFNO1FBQUVHLGdCQUFBQSxpRUFBZ0I7SUFDckQsSUFBTUMsVUFBVVAsZUFBZVEsVUFBVSxJQUNuQ0MsWUFBWSxBQUFDSCxrQkFBa0IsT0FDakJDLE9BQU8sQ0FBQ0QsY0FBYyxHQUNwQk4sZUFBZVUsWUFBWSxJQUMzQ0MsaUJBQWlCLE1BQ2pCQyxPQUFPWixlQUFlYSxLQUFLLENBQUNWLFFBQVFNLFdBQVdFO0lBRXJELElBQUlDLFNBQVMsTUFBTTtRQUNqQixJQUFNRSxVQUFVakI7UUFFaEJrQixRQUFRQyxHQUFHLENBQUNGO0lBQ2Q7SUFFQSxPQUFPRjtBQUNUIn0=