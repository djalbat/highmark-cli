"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return markdownHTMLOperation;
    }
});
var _necessary = require("necessary");
var _highmarkmarkdown = require("highmark-markdown");
var _importer = /*#__PURE__*/ _interop_require_default(require("../importer"));
var _fileSystem = require("../utilities/fileSystem");
var _configuration = require("../configuration");
var _division = require("../utilities/division");
var _markdown = require("../utilities/markdown");
var _messages = require("../messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var postprocess = _highmarkmarkdown.processingUtilities.postprocess, concatenatePaths = _necessary.pathUtilities.concatenatePaths;
function markdownHTMLOperation(proceed, abort, context) {
    var inputFileName = context.inputFileName, projectDirectoryName = context.projectDirectoryName, inputFilePath = concatenatePaths(projectDirectoryName, inputFileName), filePath = inputFilePath, content = (0, _fileSystem.readFile)(filePath);
    if (content === null) {
        var message = _messages.UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE;
        console.log(message);
        abort();
        return;
    }
    var className = (0, _division.classNameFromFilePath)(filePath), tokens = (0, _markdown.tokensFromContent)(content), node = (0, _markdown.nodeFromTokens)(tokens);
    if (node === null) {
        var message1 = _messages.UNABLE_TO_CONVERT_MARKDOWN_TO_HTML_MESSAGE;
        console.log(message1);
        abort();
        return;
    }
    var options = (0, _configuration.retrieveOptions)(), linesPerPage = options.linesPerPage, contentsDepth = options.contentsDepth, charactersPerLine = options.charactersPerLine, divisionClassName = className, divisionMarkdownNode = node; ///
    Object.assign(context, {
        tokens: tokens,
        importer: _importer.default,
        linesPerPage: linesPerPage,
        contentsDepth: contentsDepth,
        nodeFromTokens: _markdown.nodeFromTokens,
        tokensFromContent: _markdown.tokensFromContent,
        charactersPerLine: charactersPerLine,
        divisionClassName: divisionClassName
    });
    var markdownNodes = postprocess(divisionMarkdownNode, context), markdownHTML = markdownNodes.reduce(function(markdownHTML, markdownNode) {
        var markdownNodeHTML = markdownNode.asHTML(context);
        markdownHTML = markdownHTML === null ? markdownNodeHTML : "".concat(markdownHTML).concat(markdownNodeHTML);
        return markdownHTML;
    }, null);
    Object.assign(context, {
        markdownHTML: markdownHTML
    });
    proceed();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vbWFya2Rvd25IVE1MLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcHJvY2Vzc2luZ1V0aWxpdGllcyB9IGZyb20gXCJoaWdobWFyay1tYXJrZG93blwiO1xuXG5pbXBvcnQgaW1wb3J0ZXIgZnJvbSBcIi4uL2ltcG9ydGVyXCI7XG5cbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9maWxlU3lzdGVtXCI7XG5pbXBvcnQgeyByZXRyaWV2ZU9wdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgY2xhc3NOYW1lRnJvbUZpbGVQYXRoIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kaXZpc2lvblwiO1xuaW1wb3J0IHsgbm9kZUZyb21Ub2tlbnMsIHRva2Vuc0Zyb21Db250ZW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9tYXJrZG93blwiO1xuaW1wb3J0IHsgVU5BQkxFX1RPX0NPTlZFUlRfTUFSS0RPV05fVE9fSFRNTF9NRVNTQUdFIH0gZnJvbSBcIi4uL21lc3NhZ2VzXCI7XG5cbmNvbnN0IHsgcG9zdHByb2Nlc3MgfSA9IHByb2Nlc3NpbmdVdGlsaXRpZXMsXG4gICAgICB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcmtkb3duSFRNTE9wZXJhdGlvbihwcm9jZWVkLCBhYm9ydCwgY29udGV4dCkge1xuICBjb25zdCB7IGlucHV0RmlsZU5hbWUsIHByb2plY3REaXJlY3RvcnlOYW1lIH0gPSBjb250ZXh0LFxuICAgICAgICBpbnB1dEZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0RGlyZWN0b3J5TmFtZSwgaW5wdXRGaWxlTmFtZSksXG4gICAgICAgIGZpbGVQYXRoID0gaW5wdXRGaWxlUGF0aCwgLy8vXG4gICAgICAgIGNvbnRlbnQgPSByZWFkRmlsZShmaWxlUGF0aCk7XG5cbiAgaWYgKGNvbnRlbnQgPT09IG51bGwpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gVU5BQkxFX1RPX0NPTlZFUlRfTUFSS0RPV05fVE9fSFRNTF9NRVNTQUdFO1xuXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICBhYm9ydCgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NOYW1lRnJvbUZpbGVQYXRoKGZpbGVQYXRoKSxcbiAgICAgICAgdG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBub2RlRnJvbVRva2Vucyh0b2tlbnMpO1xuXG4gIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IFVOQUJMRV9UT19DT05WRVJUX01BUktET1dOX1RPX0hUTUxfTUVTU0FHRTtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4gICAgYWJvcnQoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSByZXRyaWV2ZU9wdGlvbnMoKSxcbiAgICAgICAgeyBsaW5lc1BlclBhZ2UsXG4gICAgICAgICAgY29udGVudHNEZXB0aCxcbiAgICAgICAgICBjaGFyYWN0ZXJzUGVyTGluZSB9ID0gb3B0aW9ucyxcbiAgICAgICAgZGl2aXNpb25DbGFzc05hbWUgPSBjbGFzc05hbWUsICAvLy9cbiAgICAgICAgZGl2aXNpb25NYXJrZG93bk5vZGUgPSBub2RlOyAgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgdG9rZW5zLFxuICAgIGltcG9ydGVyLFxuICAgIGxpbmVzUGVyUGFnZSxcbiAgICBjb250ZW50c0RlcHRoLFxuICAgIG5vZGVGcm9tVG9rZW5zLFxuICAgIHRva2Vuc0Zyb21Db250ZW50LFxuICAgIGNoYXJhY3RlcnNQZXJMaW5lLFxuICAgIGRpdmlzaW9uQ2xhc3NOYW1lXG4gIH0pO1xuXG4gIGNvbnN0IG1hcmtkb3duTm9kZXMgPSBwb3N0cHJvY2VzcyhkaXZpc2lvbk1hcmtkb3duTm9kZSwgY29udGV4dCksXG4gICAgICAgIG1hcmtkb3duSFRNTCA9IG1hcmtkb3duTm9kZXMucmVkdWNlKChtYXJrZG93bkhUTUwsIG1hcmtkb3duTm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1hcmtkb3duTm9kZUhUTUwgPSBtYXJrZG93bk5vZGUuYXNIVE1MKGNvbnRleHQpO1xuXG4gICAgICAgICAgbWFya2Rvd25IVE1MID0gKG1hcmtkb3duSFRNTCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25Ob2RlSFRNTCA6ICAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHttYXJrZG93bkhUTUx9JHttYXJrZG93bk5vZGVIVE1MfWA7XG5cbiAgICAgICAgICByZXR1cm4gbWFya2Rvd25IVE1MO1xuICAgICAgICB9LCBudWxsKTtcblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICBtYXJrZG93bkhUTUxcbiAgfSk7XG5cbiAgcHJvY2VlZCgpO1xufVxuIl0sIm5hbWVzIjpbIm1hcmtkb3duSFRNTE9wZXJhdGlvbiIsInBvc3Rwcm9jZXNzIiwicHJvY2Vzc2luZ1V0aWxpdGllcyIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwicHJvY2VlZCIsImFib3J0IiwiY29udGV4dCIsImlucHV0RmlsZU5hbWUiLCJwcm9qZWN0RGlyZWN0b3J5TmFtZSIsImlucHV0RmlsZVBhdGgiLCJmaWxlUGF0aCIsImNvbnRlbnQiLCJyZWFkRmlsZSIsIm1lc3NhZ2UiLCJVTkFCTEVfVE9fQ09OVkVSVF9NQVJLRE9XTl9UT19IVE1MX01FU1NBR0UiLCJjb25zb2xlIiwibG9nIiwiY2xhc3NOYW1lIiwiY2xhc3NOYW1lRnJvbUZpbGVQYXRoIiwidG9rZW5zIiwidG9rZW5zRnJvbUNvbnRlbnQiLCJub2RlIiwibm9kZUZyb21Ub2tlbnMiLCJvcHRpb25zIiwicmV0cmlldmVPcHRpb25zIiwibGluZXNQZXJQYWdlIiwiY29udGVudHNEZXB0aCIsImNoYXJhY3RlcnNQZXJMaW5lIiwiZGl2aXNpb25DbGFzc05hbWUiLCJkaXZpc2lvbk1hcmtkb3duTm9kZSIsIk9iamVjdCIsImFzc2lnbiIsImltcG9ydGVyIiwibWFya2Rvd25Ob2RlcyIsIm1hcmtkb3duSFRNTCIsInJlZHVjZSIsIm1hcmtkb3duTm9kZSIsIm1hcmtkb3duTm9kZUhUTUwiLCJhc0hUTUwiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWdCQTs7O2VBQXdCQTs7O3lCQWRNO2dDQUNNOytEQUVmOzBCQUVJOzZCQUNPO3dCQUNNO3dCQUNZO3dCQUNTOzs7Ozs7QUFFM0QsSUFBTSxBQUFFQyxjQUFnQkMscUNBQW1CLENBQW5DRCxhQUNGLEFBQUVFLG1CQUFxQkMsd0JBQWEsQ0FBbENEO0FBRU8sU0FBU0gsc0JBQXNCSyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsT0FBTztJQUNuRSxJQUFRQyxnQkFBd0NELFFBQXhDQyxlQUFlQyx1QkFBeUJGLFFBQXpCRSxzQkFDakJDLGdCQUFnQlAsaUJBQWlCTSxzQkFBc0JELGdCQUN2REcsV0FBV0QsZUFDWEUsVUFBVUMsSUFBQUEsb0JBQVEsRUFBQ0Y7SUFFekIsSUFBSUMsWUFBWSxNQUFNO1FBQ3BCLElBQU1FLFVBQVVDLG9EQUEwQztRQUUxREMsUUFBUUMsR0FBRyxDQUFDSDtRQUVaUjtRQUVBO0lBQ0Y7SUFFQSxJQUFNWSxZQUFZQyxJQUFBQSwrQkFBcUIsRUFBQ1IsV0FDbENTLFNBQVNDLElBQUFBLDJCQUFpQixFQUFDVCxVQUMzQlUsT0FBT0MsSUFBQUEsd0JBQWMsRUFBQ0g7SUFFNUIsSUFBSUUsU0FBUyxNQUFNO1FBQ2pCLElBQU1SLFdBQVVDLG9EQUEwQztRQUUxREMsUUFBUUMsR0FBRyxDQUFDSDtRQUVaUjtRQUVBO0lBQ0Y7SUFFQSxJQUFNa0IsVUFBVUMsSUFBQUEsOEJBQWUsS0FDdkJDLGVBRXNCRixRQUZ0QkUsY0FDQUMsZ0JBQ3NCSCxRQUR0QkcsZUFDQUMsb0JBQXNCSixRQUF0QkksbUJBQ0ZDLG9CQUFvQlgsV0FDcEJZLHVCQUF1QlIsTUFBTyxHQUFHO0lBRXZDUyxPQUFPQyxNQUFNLENBQUN6QixTQUFTO1FBQ3JCYSxRQUFBQTtRQUNBYSxVQUFBQSxpQkFBUTtRQUNSUCxjQUFBQTtRQUNBQyxlQUFBQTtRQUNBSixnQkFBQUEsd0JBQWM7UUFDZEYsbUJBQUFBLDJCQUFpQjtRQUNqQk8sbUJBQUFBO1FBQ0FDLG1CQUFBQTtJQUNGO0lBRUEsSUFBTUssZ0JBQWdCakMsWUFBWTZCLHNCQUFzQnZCLFVBQ2xENEIsZUFBZUQsY0FBY0UsTUFBTSxDQUFDLFNBQUNELGNBQWNFO1FBQ2pELElBQU1DLG1CQUFtQkQsYUFBYUUsTUFBTSxDQUFDaEM7UUFFN0M0QixlQUFlLEFBQUNBLGlCQUFpQixPQUNoQkcsbUJBQ0MsQUFBQyxHQUFpQkEsT0FBZkgsY0FBZ0MsT0FBakJHO1FBRXBDLE9BQU9IO0lBQ1QsR0FBRztJQUVUSixPQUFPQyxNQUFNLENBQUN6QixTQUFTO1FBQ3JCNEIsY0FBQUE7SUFDRjtJQUVBOUI7QUFDRiJ9